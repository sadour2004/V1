{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _Platform = _interopRequireDefault(require(\"../Utilities/Platform\"));\nif (__DEV__) {\n  var _global$__METRO_GLOBA;\n  if (!_Platform.default.isTesting) {\n    var HMRClient = require('../Utilities/HMRClient').default;\n    if (console._isPolyfilled) {\n      ['trace', 'info', 'warn', 'error', 'log', 'group', 'groupCollapsed', 'groupEnd', 'debug'].forEach(function (level) {\n        var originalFunction = console[level];\n        console[level] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          HMRClient.log(level, args);\n          originalFunction.apply(console, args);\n        };\n      });\n    }\n  }\n  require('./setUpReactRefresh');\n  global[`${(_global$__METRO_GLOBA = global.__METRO_GLOBAL_PREFIX__) != null ? _global$__METRO_GLOBA : ''}__loadBundleAsync`] = require('./Devtools/loadBundleFromServer').default;\n}","map":{"version":3,"names":["_Platform","_interopRequireDefault","require","__DEV__","_global$__METRO_GLOBA","Platform","isTesting","HMRClient","default","console","_isPolyfilled","forEach","level","originalFunction","_len","arguments","length","args","Array","_key","log","apply","global","__METRO_GLOBAL_PREFIX__"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Core/setUpDeveloperTools.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\ndeclare var console: {[string]: $FlowFixMe};\n\n/**\n * Sets up developer tools for React Native.\n * You can use this module directly, or just require InitializeCore.\n */\nif (__DEV__) {\n  if (!Platform.isTesting) {\n    const HMRClient = require('../Utilities/HMRClient').default;\n\n    // TODO(T214991636): Remove legacy Metro log forwarding\n    if (console._isPolyfilled) {\n      // We assume full control over the console and send JavaScript logs to Metro.\n      [\n        'trace',\n        'info',\n        'warn',\n        'error',\n        'log',\n        'group',\n        'groupCollapsed',\n        'groupEnd',\n        'debug',\n      ].forEach(level => {\n        const originalFunction = console[level];\n        console[level] = function (...args: $ReadOnlyArray<mixed>) {\n          HMRClient.log(level, args);\n          originalFunction.apply(console, args);\n        };\n      });\n    }\n  }\n\n  require('./setUpReactRefresh');\n\n  global[`${global.__METRO_GLOBAL_PREFIX__ ?? ''}__loadBundleAsync`] =\n    require('./Devtools/loadBundleFromServer').default;\n}\n"],"mappings":";AAUA,IAAAA,SAAA,GAAAC,sBAAA,CAAAC,OAAA;AAQA,IAAIC,OAAO,EAAE;EAAA,IAAAC,qBAAA;EACX,IAAI,CAACC,iBAAQ,CAACC,SAAS,EAAE;IACvB,IAAMC,SAAS,GAAGL,OAAO,CAAC,wBAAwB,CAAC,CAACM,OAAO;IAG3D,IAAIC,OAAO,CAACC,aAAa,EAAE;MAEzB,CACE,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,EACP,KAAK,EACL,OAAO,EACP,gBAAgB,EAChB,UAAU,EACV,OAAO,CACR,CAACC,OAAO,CAAC,UAAAC,KAAK,EAAI;QACjB,IAAMC,gBAAgB,GAAGJ,OAAO,CAACG,KAAK,CAAC;QACvCH,OAAO,CAACG,KAAK,CAAC,GAAG,YAA0C;UAAA,SAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA7BC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;YAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;UAAA;UAChCZ,SAAS,CAACa,GAAG,CAACR,KAAK,EAAEK,IAAI,CAAC;UAC1BJ,gBAAgB,CAACQ,KAAK,CAACZ,OAAO,EAAEQ,IAAI,CAAC;QACvC,CAAC;MACH,CAAC,CAAC;IACJ;EACF;EAEAf,OAAO,CAAC,qBAAqB,CAAC;EAE9BoB,MAAM,CAAC,IAAAlB,qBAAA,GAAGkB,MAAM,CAACC,uBAAuB,YAAAnB,qBAAA,GAAI,EAAE,mBAAmB,CAAC,GAChEF,OAAO,CAAC,iCAAiC,CAAC,CAACM,OAAO;AACtD","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}