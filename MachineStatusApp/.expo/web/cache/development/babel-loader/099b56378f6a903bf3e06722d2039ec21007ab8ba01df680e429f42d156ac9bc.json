{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _readOnlyError2 = _interopRequireDefault(require(\"@babel/runtime/helpers/readOnlyError\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _EventTiming = require(\"./EventTiming\");\nvar _RawPerformanceEntry = require(\"./internals/RawPerformanceEntry\");\nvar _Utilities = require(\"./internals/Utilities\");\nvar _MemoryInfo = _interopRequireDefault(require(\"./MemoryInfo\"));\nvar _ReactNativeStartupTiming = _interopRequireDefault(require(\"./ReactNativeStartupTiming\"));\nvar _NativePerformance = _interopRequireDefault(require(\"./specs/NativePerformance\"));\nvar _UserTiming = require(\"./UserTiming\");\nvar _ref, _NativePerformance$no;\nvar getCurrentTimeStamp = (_ref = (_NativePerformance$no = _NativePerformance.default == null ? void 0 : _NativePerformance.default.now) != null ? _NativePerformance$no : global.nativePerformanceNow) != null ? _ref : function () {\n  return Date.now();\n};\nvar ENTRY_TYPES_AVAILABLE_FROM_TIMELINE = ['mark', 'measure'];\nvar Performance = exports.default = function () {\n  function Performance() {\n    (0, _classCallCheck2.default)(this, Performance);\n    this.eventCounts = new _EventTiming.EventCounts();\n  }\n  return (0, _createClass2.default)(Performance, [{\n    key: \"memory\",\n    get: function get() {\n      if (_NativePerformance.default != null && _NativePerformance.default.getSimpleMemoryInfo) {\n        var memoryInfo = _NativePerformance.default.getSimpleMemoryInfo();\n        if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n          var totalJSHeapSize = memoryInfo.hermes_heapSize,\n            usedJSHeapSize = memoryInfo.hermes_allocatedBytes;\n          return new _MemoryInfo.default({\n            jsHeapSizeLimit: null,\n            totalJSHeapSize: totalJSHeapSize,\n            usedJSHeapSize: usedJSHeapSize\n          });\n        } else {\n          return new _MemoryInfo.default();\n        }\n      }\n      return new _MemoryInfo.default();\n    }\n  }, {\n    key: \"rnStartupTiming\",\n    get: function get() {\n      if (_NativePerformance.default != null && _NativePerformance.default.getReactNativeStartupTiming) {\n        var _NativePerformance$ge = _NativePerformance.default.getReactNativeStartupTiming(),\n          startTime = _NativePerformance$ge.startTime,\n          endTime = _NativePerformance$ge.endTime,\n          initializeRuntimeStart = _NativePerformance$ge.initializeRuntimeStart,\n          initializeRuntimeEnd = _NativePerformance$ge.initializeRuntimeEnd,\n          executeJavaScriptBundleEntryPointStart = _NativePerformance$ge.executeJavaScriptBundleEntryPointStart,\n          executeJavaScriptBundleEntryPointEnd = _NativePerformance$ge.executeJavaScriptBundleEntryPointEnd;\n        return new _ReactNativeStartupTiming.default({\n          startTime: startTime,\n          endTime: endTime,\n          initializeRuntimeStart: initializeRuntimeStart,\n          initializeRuntimeEnd: initializeRuntimeEnd,\n          executeJavaScriptBundleEntryPointStart: executeJavaScriptBundleEntryPointStart,\n          executeJavaScriptBundleEntryPointEnd: executeJavaScriptBundleEntryPointEnd\n        });\n      }\n      return new _ReactNativeStartupTiming.default();\n    }\n  }, {\n    key: \"mark\",\n    value: function mark(markName, markOptions) {\n      var computedStartTime;\n      if (_NativePerformance.default != null && _NativePerformance.default.markWithResult) {\n        computedStartTime = _NativePerformance.default.markWithResult(markName, markOptions == null ? void 0 : markOptions.startTime);\n      } else {\n        (0, _Utilities.warnNoNativePerformance)();\n        computedStartTime = performance.now();\n      }\n      return new _UserTiming.PerformanceMark(markName, {\n        startTime: computedStartTime,\n        detail: markOptions == null ? void 0 : markOptions.detail\n      });\n    }\n  }, {\n    key: \"clearMarks\",\n    value: function clearMarks(markName) {\n      if (!(_NativePerformance.default != null && _NativePerformance.default.clearMarks)) {\n        (0, _Utilities.warnNoNativePerformance)();\n        return;\n      }\n      _NativePerformance.default.clearMarks(markName);\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(measureName, startMarkOrOptions, endMark) {\n      var _options;\n      var options;\n      var startMarkName,\n        endMarkName = endMark,\n        duration,\n        startTime = 0,\n        endTime = 0;\n      if (typeof startMarkOrOptions === 'string') {\n        startMarkName = startMarkOrOptions;\n        options = {};\n      } else if (startMarkOrOptions !== undefined) {\n        var _options$duration;\n        options = startMarkOrOptions;\n        if (endMark !== undefined) {\n          throw new TypeError(\"Performance.measure: Can't have both options and endMark\");\n        }\n        if (options.start === undefined && options.end === undefined) {\n          throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');\n        }\n        if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {\n          throw new TypeError(\"Performance.measure: Can't have both start/end and duration explicitly in options\");\n        }\n        if (typeof options.start === 'number') {\n          startTime = options.start;\n        } else {\n          startMarkName = options.start;\n        }\n        if (typeof options.end === 'number') {\n          endTime = options.end;\n        } else {\n          endMarkName = options.end;\n        }\n        duration = (_options$duration = options.duration) != null ? _options$duration : duration;\n      }\n      var computedStartTime = startTime;\n      var computedDuration = duration;\n      if (_NativePerformance.default != null && _NativePerformance.default.measureWithResult) {\n        var _NativePerformance$me = _NativePerformance.default.measureWithResult(measureName, startTime, endTime, duration, startMarkName, endMarkName);\n        var _NativePerformance$me2 = (0, _slicedToArray2.default)(_NativePerformance$me, 2);\n        computedStartTime = _NativePerformance$me2[0];\n        computedDuration = _NativePerformance$me2[1];\n      } else {\n        (0, _Utilities.warnNoNativePerformance)();\n      }\n      var measure = new _UserTiming.PerformanceMeasure(measureName, {\n        startTime: computedStartTime,\n        duration: computedDuration != null ? computedDuration : 0,\n        detail: (_options = options) == null ? void 0 : _options.detail\n      });\n      return measure;\n    }\n  }, {\n    key: \"clearMeasures\",\n    value: function clearMeasures(measureName) {\n      if (!(_NativePerformance.default != null && _NativePerformance.default.clearMeasures)) {\n        (0, _Utilities.warnNoNativePerformance)();\n        return;\n      }\n      _NativePerformance.default == null || _NativePerformance.default.clearMeasures(measureName);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      return getCurrentTimeStamp();\n    }\n  }, {\n    key: \"getEntries\",\n    value: function getEntries() {\n      if (!(_NativePerformance.default != null && _NativePerformance.default.getEntries)) {\n        (0, _Utilities.warnNoNativePerformance)();\n        return [];\n      }\n      return _NativePerformance.default.getEntries().map(_RawPerformanceEntry.rawToPerformanceEntry);\n    }\n  }, {\n    key: \"getEntriesByType\",\n    value: function getEntriesByType(entryType) {\n      if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {\n        console.warn('Deprecated API for given entry type.');\n        return [];\n      }\n      if (!(_NativePerformance.default != null && _NativePerformance.default.getEntriesByType)) {\n        (0, _Utilities.warnNoNativePerformance)();\n        return [];\n      }\n      return _NativePerformance.default.getEntriesByType((0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType)).map(_RawPerformanceEntry.rawToPerformanceEntry);\n    }\n  }, {\n    key: \"getEntriesByName\",\n    value: function getEntriesByName(entryName, entryType) {\n      if (entryType != null && !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)) {\n        console.warn('Deprecated API for given entry type.');\n        return [];\n      }\n      if (!(_NativePerformance.default != null && _NativePerformance.default.getEntriesByName)) {\n        (0, _Utilities.warnNoNativePerformance)();\n        return [];\n      }\n      return _NativePerformance.default.getEntriesByName(entryName, entryType != null ? (0, _RawPerformanceEntry.performanceEntryTypeToRaw)(entryType) : undefined).map(_RawPerformanceEntry.rawToPerformanceEntry);\n    }\n  }]);\n}();","map":{"version":3,"names":["_EventTiming","require","_RawPerformanceEntry","_Utilities","_MemoryInfo","_interopRequireDefault","_ReactNativeStartupTiming","_NativePerformance","_UserTiming","_ref","_NativePerformance$no","getCurrentTimeStamp","NativePerformance","now","global","nativePerformanceNow","Date","ENTRY_TYPES_AVAILABLE_FROM_TIMELINE","Performance","exports","default","_classCallCheck2","eventCounts","EventCounts","_createClass2","key","get","getSimpleMemoryInfo","memoryInfo","hasOwnProperty","totalJSHeapSize","hermes_heapSize","usedJSHeapSize","hermes_allocatedBytes","MemoryInfo","jsHeapSizeLimit","getReactNativeStartupTiming","_NativePerformance$ge","startTime","endTime","initializeRuntimeStart","initializeRuntimeEnd","executeJavaScriptBundleEntryPointStart","executeJavaScriptBundleEntryPointEnd","ReactNativeStartupTiming","value","mark","markName","markOptions","computedStartTime","markWithResult","warnNoNativePerformance","performance","PerformanceMark","detail","clearMarks","measure","measureName","startMarkOrOptions","endMark","_options","options","startMarkName","endMarkName","duration","undefined","_options$duration","TypeError","start","end","computedDuration","measureWithResult","_NativePerformance$me","_NativePerformance$me2","_slicedToArray2","PerformanceMeasure","clearMeasures","getEntries","map","rawToPerformanceEntry","getEntriesByType","entryType","includes","console","warn","performanceEntryTypeToRaw","getEntriesByName","entryName"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/src/private/webapis/performance/Performance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {\n  DOMHighResTimeStamp,\n  PerformanceEntryList,\n  PerformanceEntryType,\n} from './PerformanceEntry';\nimport type {DetailType, PerformanceMarkOptions} from './UserTiming';\n\nimport {EventCounts} from './EventTiming';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n} from './internals/RawPerformanceEntry';\nimport {warnNoNativePerformance} from './internals/Utilities';\nimport MemoryInfo from './MemoryInfo';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\nimport NativePerformance from './specs/NativePerformance';\nimport {PerformanceMark, PerformanceMeasure} from './UserTiming';\n\ndeclare var global: {\n  // This value is defined directly via JSI, if available.\n  +nativePerformanceNow?: ?() => number,\n};\n\nconst getCurrentTimeStamp: () => DOMHighResTimeStamp =\n  NativePerformance?.now ?? global.nativePerformanceNow ?? (() => Date.now());\n\nexport type PerformanceMeasureOptions = {\n  detail?: DetailType,\n  start?: DOMHighResTimeStamp,\n  duration?: DOMHighResTimeStamp,\n  end?: DOMHighResTimeStamp,\n};\n\nconst ENTRY_TYPES_AVAILABLE_FROM_TIMELINE: $ReadOnlyArray<PerformanceEntryType> =\n  ['mark', 'measure'];\n\n/**\n * Partial implementation of the Performance interface for RN,\n * corresponding to the standard in\n * https://www.w3.org/TR/user-timing/#extensions-performance-interface\n */\nexport default class Performance {\n  eventCounts: EventCounts = new EventCounts();\n\n  // Get the current JS memory information.\n  get memory(): MemoryInfo {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      // JSI API implementations may have different variants of names for the JS\n      // heap information we need here. We will parse the result based on our\n      // guess of the implementation for now.\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        // We got memory information from Hermes\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize,\n        } = memoryInfo;\n\n        return new MemoryInfo({\n          jsHeapSizeLimit: null, // We don't know the heap size limit from Hermes.\n          totalJSHeapSize,\n          usedJSHeapSize,\n        });\n      } else {\n        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation\n        return new MemoryInfo();\n      }\n    }\n\n    return new MemoryInfo();\n  }\n\n  // Startup metrics is not used in web, but only in React Native.\n  get rnStartupTiming(): ReactNativeStartupTiming {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      const {\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd,\n      } = NativePerformance.getReactNativeStartupTiming();\n      return new ReactNativeStartupTiming({\n        startTime,\n        endTime,\n        initializeRuntimeStart,\n        initializeRuntimeEnd,\n        executeJavaScriptBundleEntryPointStart,\n        executeJavaScriptBundleEntryPointEnd,\n      });\n    }\n    return new ReactNativeStartupTiming();\n  }\n\n  mark(\n    markName: string,\n    markOptions?: PerformanceMarkOptions,\n  ): PerformanceMark {\n    let computedStartTime;\n    if (NativePerformance?.markWithResult) {\n      computedStartTime = NativePerformance.markWithResult(\n        markName,\n        markOptions?.startTime,\n      );\n    } else {\n      warnNoNativePerformance();\n      computedStartTime = performance.now();\n    }\n\n    return new PerformanceMark(markName, {\n      startTime: computedStartTime,\n      detail: markOptions?.detail,\n    });\n  }\n\n  clearMarks(markName?: string): void {\n    if (!NativePerformance?.clearMarks) {\n      warnNoNativePerformance();\n      return;\n    }\n\n    NativePerformance.clearMarks(markName);\n  }\n\n  measure(\n    measureName: string,\n    startMarkOrOptions?: string | PerformanceMeasureOptions,\n    endMark?: string,\n  ): PerformanceMeasure {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n      options = {};\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both options and endMark\",\n        );\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError(\n          'Performance.measure: Must have at least one of start/end specified in options',\n        );\n      }\n      if (\n        options.start !== undefined &&\n        options.end !== undefined &&\n        options.duration !== undefined\n      ) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both start/end and duration explicitly in options\",\n        );\n      }\n\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n\n      duration = options.duration ?? duration;\n    }\n\n    let computedStartTime = startTime;\n    let computedDuration = duration;\n\n    if (NativePerformance?.measureWithResult) {\n      [computedStartTime, computedDuration] =\n        NativePerformance.measureWithResult(\n          measureName,\n          startTime,\n          endTime,\n          duration,\n          startMarkName,\n          endMarkName,\n        );\n    } else {\n      warnNoNativePerformance();\n    }\n\n    const measure = new PerformanceMeasure(measureName, {\n      startTime: computedStartTime,\n      duration: computedDuration ?? 0,\n      detail: options?.detail,\n    });\n\n    return measure;\n  }\n\n  clearMeasures(measureName?: string): void {\n    if (!NativePerformance?.clearMeasures) {\n      warnNoNativePerformance();\n      return;\n    }\n\n    NativePerformance?.clearMeasures(measureName);\n  }\n\n  /**\n   * Returns a double, measured in milliseconds.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n   */\n  now(): DOMHighResTimeStamp {\n    return getCurrentTimeStamp();\n  }\n\n  /**\n   * An extension that allows to get back to JS all currently logged marks/measures\n   * (in our case, be it from JS or native), see\n   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface\n   */\n  getEntries(): PerformanceEntryList {\n    if (!NativePerformance?.getEntries) {\n      warnNoNativePerformance();\n      return [];\n    }\n    return NativePerformance.getEntries().map(rawToPerformanceEntry);\n  }\n\n  getEntriesByType(entryType: PerformanceEntryType): PerformanceEntryList {\n    if (\n      entryType != null &&\n      !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)\n    ) {\n      console.warn('Deprecated API for given entry type.');\n      return [];\n    }\n\n    if (!NativePerformance?.getEntriesByType) {\n      warnNoNativePerformance();\n      return [];\n    }\n\n    return NativePerformance.getEntriesByType(\n      performanceEntryTypeToRaw(entryType),\n    ).map(rawToPerformanceEntry);\n  }\n\n  getEntriesByName(\n    entryName: string,\n    entryType?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (\n      entryType != null &&\n      !ENTRY_TYPES_AVAILABLE_FROM_TIMELINE.includes(entryType)\n    ) {\n      console.warn('Deprecated API for given entry type.');\n      return [];\n    }\n\n    if (!NativePerformance?.getEntriesByName) {\n      warnNoNativePerformance();\n      return [];\n    }\n\n    return NativePerformance.getEntriesByName(\n      entryName,\n      entryType != null ? performanceEntryTypeToRaw(entryType) : undefined,\n    ).map(rawToPerformanceEntry);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}