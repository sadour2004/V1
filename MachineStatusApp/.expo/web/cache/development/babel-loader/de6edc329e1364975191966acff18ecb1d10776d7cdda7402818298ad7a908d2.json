{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _AndroidSwipeRefreshLayoutNativeComponent = _interopRequireWildcard(require(\"./AndroidSwipeRefreshLayoutNativeComponent\"));\nvar _PullToRefreshViewNativeComponent = _interopRequireWildcard(require(\"./PullToRefreshViewNativeComponent\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _jsxFileName = \"/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js\";\nvar _excluded = [\"enabled\", \"colors\", \"progressBackgroundColor\", \"size\"],\n  _excluded2 = [\"tintColor\", \"titleColor\", \"title\"];\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar Platform = require('../../Utilities/Platform').default;\nvar RefreshControl = function (_React$Component) {\n  function RefreshControl() {\n    var _this;\n    (0, _classCallCheck2.default)(this, RefreshControl);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, RefreshControl, [].concat(args));\n    _this._lastNativeRefreshing = false;\n    _this._onRefresh = function () {\n      _this._lastNativeRefreshing = true;\n      _this.props.onRefresh && _this.props.onRefresh();\n      _this.forceUpdate();\n    };\n    _this._setNativeRef = function (ref) {\n      _this._nativeRef = ref;\n    };\n    return _this;\n  }\n  (0, _inherits2.default)(RefreshControl, _React$Component);\n  return (0, _createClass2.default)(RefreshControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.refreshing !== prevProps.refreshing) {\n        this._lastNativeRefreshing = this.props.refreshing;\n      } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {\n        if (Platform.OS === 'android') {\n          _AndroidSwipeRefreshLayoutNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        } else {\n          _PullToRefreshViewNativeComponent.Commands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        }\n        this._lastNativeRefreshing = this.props.refreshing;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'ios') {\n        var _this$props = this.props,\n          enabled = _this$props.enabled,\n          colors = _this$props.colors,\n          progressBackgroundColor = _this$props.progressBackgroundColor,\n          size = _this$props.size,\n          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n        return (0, _jsxRuntime.jsx)(_PullToRefreshViewNativeComponent.default, Object.assign({}, props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh\n        }));\n      } else {\n        var _this$props2 = this.props,\n          tintColor = _this$props2.tintColor,\n          titleColor = _this$props2.titleColor,\n          title = _this$props2.title,\n          _props = (0, _objectWithoutProperties2.default)(_this$props2, _excluded2);\n        return (0, _jsxRuntime.jsx)(_AndroidSwipeRefreshLayoutNativeComponent.default, Object.assign({}, _props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh\n        }));\n      }\n    }\n  }]);\n}(_react.default.Component);\nvar _default = exports.default = RefreshControl;","map":{"version":3,"names":["_AndroidSwipeRefreshLayoutNativeComponent","_interopRequireWildcard","require","_PullToRefreshViewNativeComponent","_react","_interopRequireDefault","_jsxRuntime","_jsxFileName","_excluded","_excluded2","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_callSuper","_getPrototypeOf2","_possibleConstructorReturn2","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","Platform","RefreshControl","_React$Component","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","concat","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","_setNativeRef","ref","_nativeRef","_inherits2","_createClass2","key","value","componentDidMount","refreshing","componentDidUpdate","prevProps","OS","AndroidSwipeRefreshLayoutCommands","setNativeRefreshing","PullToRefreshCommands","render","_this$props","enabled","colors","progressBackgroundColor","size","_objectWithoutProperties2","jsx","assign","_this$props2","tintColor","titleColor","title","React","Component","_default","exports"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\nimport React from 'react';\n\nconst Platform = require('../../Utilities/Platform').default;\n\nexport type RefreshControlPropsIOS = $ReadOnly<{\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n}>;\n\nexport type RefreshControlPropsAndroid = $ReadOnly<{\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: ?('default' | 'large'),\n}>;\n\ntype RefreshControlBaseProps = $ReadOnly<{\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n}>;\n\nexport type RefreshControlProps = $ReadOnly<{\n  ...ViewProps,\n  ...RefreshControlPropsIOS,\n  ...RefreshControlPropsAndroid,\n  ...RefreshControlBaseProps,\n}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing: boolean = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {enabled, colors, progressBackgroundColor, size, ...props} =\n        this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    // $FlowFixMe[unused-promise]\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nexport default RefreshControl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}