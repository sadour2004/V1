{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.create = create;\nexports.diff = diff;\nvar _flattenStyle = _interopRequireDefault(require(\"../../StyleSheet/flattenStyle\"));\nvar _deepDiffer = _interopRequireDefault(require(\"../../Utilities/differ/deepDiffer\"));\nvar emptyObject = {};\nvar removedKeys = null;\nvar removedKeyCount = 0;\nvar deepDifferOptions = {\n  unsafelyIgnoreFunctions: true\n};\nfunction defaultDiffer(prevProp, nextProp) {\n  if (typeof nextProp !== 'object' || nextProp === null) {\n    return true;\n  } else {\n    return (0, _deepDiffer.default)(prevProp, nextProp, deepDifferOptions);\n  }\n}\nfunction restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {\n  if (Array.isArray(node)) {\n    var i = node.length;\n    while (i-- && removedKeyCount > 0) {\n      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);\n    }\n  } else if (node && removedKeyCount > 0) {\n    var obj = node;\n    for (var propKey in removedKeys) {\n      if (!removedKeys[propKey]) {\n        continue;\n      }\n      var nextProp = obj[propKey];\n      if (nextProp === undefined) {\n        continue;\n      }\n      var attributeConfig = validAttributes[propKey];\n      if (!attributeConfig) {\n        continue;\n      }\n      if (typeof nextProp === 'function') {\n        nextProp = true;\n      }\n      if (typeof nextProp === 'undefined') {\n        nextProp = null;\n      }\n      if (typeof attributeConfig !== 'object') {\n        updatePayload[propKey] = nextProp;\n      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n        var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      removedKeys[propKey] = false;\n      removedKeyCount--;\n    }\n  }\n}\nfunction diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {\n  var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n  var i;\n  for (i = 0; i < minLength; i++) {\n    updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);\n  }\n  for (; i < prevArray.length; i++) {\n    updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);\n  }\n  for (; i < nextArray.length; i++) {\n    updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);\n  }\n  return updatePayload;\n}\nfunction diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {\n  if (!updatePayload && prevProp === nextProp) {\n    return updatePayload;\n  }\n  if (!prevProp || !nextProp) {\n    if (nextProp) {\n      return addNestedProperty(updatePayload, nextProp, validAttributes);\n    }\n    if (prevProp) {\n      return clearNestedProperty(updatePayload, prevProp, validAttributes);\n    }\n    return updatePayload;\n  }\n  if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {\n    return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n  }\n  if (Array.isArray(prevProp) && Array.isArray(nextProp)) {\n    return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);\n  }\n  if (Array.isArray(prevProp)) {\n    return diffProperties(updatePayload, (0, _flattenStyle.default)(prevProp), nextProp, validAttributes);\n  }\n  return diffProperties(updatePayload, prevProp, (0, _flattenStyle.default)(nextProp), validAttributes);\n}\nfunction addNestedProperty(updatePayload, nextProp, validAttributes) {\n  if (!nextProp) {\n    return updatePayload;\n  }\n  if (!Array.isArray(nextProp)) {\n    return addProperties(updatePayload, nextProp, validAttributes);\n  }\n  for (var i = 0; i < nextProp.length; i++) {\n    updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);\n  }\n  return updatePayload;\n}\nfunction clearNestedProperty(updatePayload, prevProp, validAttributes) {\n  if (!prevProp) {\n    return updatePayload;\n  }\n  if (!Array.isArray(prevProp)) {\n    return clearProperties(updatePayload, prevProp, validAttributes);\n  }\n  for (var i = 0; i < prevProp.length; i++) {\n    updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);\n  }\n  return updatePayload;\n}\nfunction diffProperties(updatePayload, prevProps, nextProps, validAttributes) {\n  var attributeConfig;\n  var nextProp;\n  var prevProp;\n  for (var propKey in nextProps) {\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue;\n    }\n    prevProp = prevProps[propKey];\n    nextProp = nextProps[propKey];\n    if (typeof nextProp === 'function') {\n      nextProp = true;\n      if (typeof prevProp === 'function') {\n        prevProp = true;\n      }\n    }\n    if (typeof nextProp === 'undefined') {\n      nextProp = null;\n      if (typeof prevProp === 'undefined') {\n        prevProp = null;\n      }\n    }\n    if (removedKeys) {\n      removedKeys[propKey] = false;\n    }\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      if (typeof attributeConfig !== 'object') {\n        updatePayload[propKey] = nextProp;\n      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n        var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      continue;\n    }\n    if (prevProp === nextProp) {\n      continue;\n    }\n    if (typeof attributeConfig !== 'object') {\n      if (defaultDiffer(prevProp, nextProp)) {\n        (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n      }\n    } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n      var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));\n      if (shouldUpdate) {\n        var _nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;\n        (updatePayload || (updatePayload = {}))[propKey] = _nextValue;\n      }\n    } else {\n      removedKeys = null;\n      removedKeyCount = 0;\n      updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);\n      if (removedKeyCount > 0 && updatePayload) {\n        restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);\n        removedKeys = null;\n      }\n    }\n  }\n  for (var _propKey in prevProps) {\n    if (nextProps[_propKey] !== undefined) {\n      continue;\n    }\n    attributeConfig = validAttributes[_propKey];\n    if (!attributeConfig) {\n      continue;\n    }\n    if (updatePayload && updatePayload[_propKey] !== undefined) {\n      continue;\n    }\n    prevProp = prevProps[_propKey];\n    if (prevProp === undefined) {\n      continue;\n    }\n    if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n      (updatePayload || (updatePayload = {}))[_propKey] = null;\n      if (!removedKeys) {\n        removedKeys = {};\n      }\n      if (!removedKeys[_propKey]) {\n        removedKeys[_propKey] = true;\n        removedKeyCount++;\n      }\n    } else {\n      updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);\n    }\n  }\n  return updatePayload;\n}\nfunction addProperties(updatePayload, props, validAttributes) {\n  return diffProperties(updatePayload, emptyObject, props, validAttributes);\n}\nfunction clearProperties(updatePayload, prevProps, validAttributes) {\n  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);\n}\nfunction create(props, validAttributes) {\n  return addProperties(null, props, validAttributes);\n}\nfunction diff(prevProps, nextProps, validAttributes) {\n  return diffProperties(null, prevProps, nextProps, validAttributes);\n}","map":{"version":3,"names":["_flattenStyle","_interopRequireDefault","require","_deepDiffer","emptyObject","removedKeys","removedKeyCount","deepDifferOptions","unsafelyIgnoreFunctions","defaultDiffer","prevProp","nextProp","deepDiffer","restoreDeletedValuesInNestedArray","updatePayload","node","validAttributes","Array","isArray","i","length","obj","propKey","undefined","attributeConfig","diff","process","nextValue","diffNestedArrayProperty","prevArray","nextArray","minLength","diffNestedProperty","clearNestedProperty","addNestedProperty","diffProperties","flattenStyle","addProperties","clearProperties","prevProps","nextProps","shouldUpdate","props","create"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactNativeAttributePayload.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {AttributeConfiguration} from '../../Renderer/shims/ReactNativeTypes';\n\nimport flattenStyle from '../../StyleSheet/flattenStyle';\nimport deepDiffer from '../../Utilities/differ/deepDiffer';\n\nconst emptyObject = {};\n\n/**\n * Create a payload that contains all the updates between two sets of props.\n *\n * These helpers are all encapsulated into a single module, because they use\n * mutation as a performance optimization which leads to subtle shared\n * dependencies between the code paths. To avoid this mutable state leaking\n * across modules, I've kept them isolated to this module.\n */\n\ntype NestedNode = Array<NestedNode> | Object;\n\n// Tracks removed keys\nlet removedKeys: {[string]: boolean} | null = null;\nlet removedKeyCount = 0;\n\nconst deepDifferOptions = {\n  unsafelyIgnoreFunctions: true,\n};\n\nfunction defaultDiffer(prevProp: mixed, nextProp: mixed): boolean {\n  if (typeof nextProp !== 'object' || nextProp === null) {\n    // Scalars have already been checked for equality\n    return true;\n  } else {\n    // For objects and arrays, the default diffing algorithm is a deep compare\n    return deepDiffer(prevProp, nextProp, deepDifferOptions);\n  }\n}\n\nfunction restoreDeletedValuesInNestedArray(\n  updatePayload: Object,\n  node: NestedNode,\n  validAttributes: AttributeConfiguration,\n) {\n  if (Array.isArray(node)) {\n    let i = node.length;\n    while (i-- && removedKeyCount > 0) {\n      restoreDeletedValuesInNestedArray(\n        updatePayload,\n        node[i],\n        validAttributes,\n      );\n    }\n  } else if (node && removedKeyCount > 0) {\n    const obj = node;\n    for (const propKey in removedKeys) {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      if (!removedKeys[propKey]) {\n        continue;\n      }\n      let nextProp = obj[propKey];\n      if (nextProp === undefined) {\n        continue;\n      }\n\n      const attributeConfig = validAttributes[propKey];\n      if (!attributeConfig) {\n        continue; // not a valid native prop\n      }\n\n      if (typeof nextProp === 'function') {\n        // $FlowFixMe[incompatible-type] found when upgrading Flow\n        nextProp = true;\n      }\n      if (typeof nextProp === 'undefined') {\n        // $FlowFixMe[incompatible-type] found when upgrading Flow\n        nextProp = null;\n      }\n\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        updatePayload[propKey] = nextProp;\n      } else if (\n        typeof attributeConfig.diff === 'function' ||\n        typeof attributeConfig.process === 'function'\n      ) {\n        // case: CustomAttributeConfiguration\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      removedKeys[propKey] = false;\n      removedKeyCount--;\n    }\n  }\n}\n\nfunction diffNestedArrayProperty(\n  updatePayload: null | Object,\n  prevArray: Array<NestedNode>,\n  nextArray: Array<NestedNode>,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  const minLength =\n    prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n  let i;\n  for (i = 0; i < minLength; i++) {\n    // Diff any items in the array in the forward direction. Repeated keys\n    // will be overwritten by later values.\n    updatePayload = diffNestedProperty(\n      updatePayload,\n      prevArray[i],\n      nextArray[i],\n      validAttributes,\n    );\n  }\n  for (; i < prevArray.length; i++) {\n    // Clear out all remaining properties.\n    updatePayload = clearNestedProperty(\n      updatePayload,\n      prevArray[i],\n      validAttributes,\n    );\n  }\n  for (; i < nextArray.length; i++) {\n    // Add all remaining properties.\n    updatePayload = addNestedProperty(\n      updatePayload,\n      nextArray[i],\n      validAttributes,\n    );\n  }\n  return updatePayload;\n}\n\nfunction diffNestedProperty(\n  updatePayload: null | Object,\n  prevProp: NestedNode,\n  nextProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  if (!updatePayload && prevProp === nextProp) {\n    // If no properties have been added, then we can bail out quickly on object\n    // equality.\n    return updatePayload;\n  }\n\n  if (!prevProp || !nextProp) {\n    if (nextProp) {\n      return addNestedProperty(updatePayload, nextProp, validAttributes);\n    }\n    if (prevProp) {\n      return clearNestedProperty(updatePayload, prevProp, validAttributes);\n    }\n    return updatePayload;\n  }\n\n  if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {\n    // Both are leaves, we can diff the leaves.\n    return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n  }\n\n  if (Array.isArray(prevProp) && Array.isArray(nextProp)) {\n    // Both are arrays, we can diff the arrays.\n    return diffNestedArrayProperty(\n      updatePayload,\n      prevProp,\n      nextProp,\n      validAttributes,\n    );\n  }\n\n  if (Array.isArray(prevProp)) {\n    return diffProperties(\n      updatePayload,\n      // $FlowFixMe - We know that this is always an object when the input is.\n      flattenStyle(prevProp),\n      // $FlowFixMe - We know that this isn't an array because of above flow.\n      nextProp,\n      validAttributes,\n    );\n  }\n\n  return diffProperties(\n    updatePayload,\n    prevProp,\n    // $FlowFixMe - We know that this is always an object when the input is.\n    flattenStyle(nextProp),\n    validAttributes,\n  );\n}\n\n/**\n * addNestedProperty takes a single set of props and valid attribute\n * attribute configurations. It processes each prop and adds it to the\n * updatePayload.\n */\nfunction addNestedProperty(\n  updatePayload: null | Object,\n  nextProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): $FlowFixMe {\n  if (!nextProp) {\n    return updatePayload;\n  }\n\n  if (!Array.isArray(nextProp)) {\n    // Add each property of the leaf.\n    return addProperties(updatePayload, nextProp, validAttributes);\n  }\n\n  for (let i = 0; i < nextProp.length; i++) {\n    // Add all the properties of the array.\n    updatePayload = addNestedProperty(\n      updatePayload,\n      nextProp[i],\n      validAttributes,\n    );\n  }\n\n  return updatePayload;\n}\n\n/**\n * clearNestedProperty takes a single set of props and valid attributes. It\n * adds a null sentinel to the updatePayload, for each prop key.\n */\nfunction clearNestedProperty(\n  updatePayload: null | Object,\n  prevProp: NestedNode,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  if (!prevProp) {\n    return updatePayload;\n  }\n\n  if (!Array.isArray(prevProp)) {\n    // Add each property of the leaf.\n    return clearProperties(updatePayload, prevProp, validAttributes);\n  }\n\n  for (let i = 0; i < prevProp.length; i++) {\n    // Add all the properties of the array.\n    updatePayload = clearNestedProperty(\n      updatePayload,\n      prevProp[i],\n      validAttributes,\n    );\n  }\n  return updatePayload;\n}\n\n/**\n * diffProperties takes two sets of props and a set of valid attributes\n * and write to updatePayload the values that changed or were deleted.\n * If no updatePayload is provided, a new one is created and returned if\n * anything changed.\n */\nfunction diffProperties(\n  updatePayload: null | Object,\n  prevProps: Object,\n  nextProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  let attributeConfig;\n  let nextProp;\n  let prevProp;\n\n  for (const propKey in nextProps) {\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue; // not a valid native prop\n    }\n\n    prevProp = prevProps[propKey];\n    nextProp = nextProps[propKey];\n\n    // functions are converted to booleans as markers that the associated\n    // events should be sent from native.\n    if (typeof nextProp === 'function') {\n      nextProp = (true: any);\n      // If nextProp is not a function, then don't bother changing prevProp\n      // since nextProp will win and go into the updatePayload regardless.\n      if (typeof prevProp === 'function') {\n        prevProp = (true: any);\n      }\n    }\n\n    // An explicit value of undefined is treated as a null because it overrides\n    // any other preceding value.\n    if (typeof nextProp === 'undefined') {\n      nextProp = (null: any);\n      if (typeof prevProp === 'undefined') {\n        prevProp = (null: any);\n      }\n    }\n\n    if (removedKeys) {\n      removedKeys[propKey] = false;\n    }\n\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      // Something else already triggered an update to this key because another\n      // value diffed. Since we're now later in the nested arrays our value is\n      // more important so we need to calculate it and override the existing\n      // value. It doesn't matter if nothing changed, we'll set it anyway.\n\n      // Pattern match on: attributeConfig\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        updatePayload[propKey] = nextProp;\n      } else if (\n        typeof attributeConfig.diff === 'function' ||\n        typeof attributeConfig.process === 'function'\n      ) {\n        // case: CustomAttributeConfiguration\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? attributeConfig.process(nextProp)\n            : nextProp;\n        updatePayload[propKey] = nextValue;\n      }\n      continue;\n    }\n\n    if (prevProp === nextProp) {\n      continue; // nothing changed\n    }\n\n    // Pattern match on: attributeConfig\n    if (typeof attributeConfig !== 'object') {\n      // case: !Object is the default case\n      if (defaultDiffer(prevProp, nextProp)) {\n        // a normal leaf has changed\n        (updatePayload || (updatePayload = ({}: {[string]: $FlowFixMe})))[\n          propKey\n        ] = nextProp;\n      }\n    } else if (\n      typeof attributeConfig.diff === 'function' ||\n      typeof attributeConfig.process === 'function'\n    ) {\n      // case: CustomAttributeConfiguration\n      const shouldUpdate =\n        prevProp === undefined ||\n        (typeof attributeConfig.diff === 'function'\n          ? attributeConfig.diff(prevProp, nextProp)\n          : defaultDiffer(prevProp, nextProp));\n      if (shouldUpdate) {\n        const nextValue =\n          typeof attributeConfig.process === 'function'\n            ? // $FlowFixMe[incompatible-use] found when upgrading Flow\n              attributeConfig.process(nextProp)\n            : nextProp;\n        (updatePayload || (updatePayload = ({}: {[string]: $FlowFixMe})))[\n          propKey\n        ] = nextValue;\n      }\n    } else {\n      // default: fallthrough case when nested properties are defined\n      removedKeys = null;\n      removedKeyCount = 0;\n      // We think that attributeConfig is not CustomAttributeConfiguration at\n      // this point so we assume it must be AttributeConfiguration.\n      updatePayload = diffNestedProperty(\n        updatePayload,\n        prevProp,\n        nextProp,\n        ((attributeConfig: any): AttributeConfiguration),\n      );\n      if (removedKeyCount > 0 && updatePayload) {\n        restoreDeletedValuesInNestedArray(\n          updatePayload,\n          nextProp,\n          ((attributeConfig: any): AttributeConfiguration),\n        );\n        removedKeys = null;\n      }\n    }\n  }\n\n  // Also iterate through all the previous props to catch any that have been\n  // removed and make sure native gets the signal so it can reset them to the\n  // default.\n  for (const propKey in prevProps) {\n    if (nextProps[propKey] !== undefined) {\n      continue; // we've already covered this key in the previous pass\n    }\n    attributeConfig = validAttributes[propKey];\n    if (!attributeConfig) {\n      continue; // not a valid native prop\n    }\n\n    if (updatePayload && updatePayload[propKey] !== undefined) {\n      // This was already updated to a diff result earlier.\n      continue;\n    }\n\n    prevProp = prevProps[propKey];\n    if (prevProp === undefined) {\n      continue; // was already empty anyway\n    }\n    // Pattern match on: attributeConfig\n    if (\n      typeof attributeConfig !== 'object' ||\n      typeof attributeConfig.diff === 'function' ||\n      typeof attributeConfig.process === 'function'\n    ) {\n      // case: CustomAttributeConfiguration | !Object\n      // Flag the leaf property for removal by sending a sentinel.\n      (updatePayload || (updatePayload = ({}: {[string]: $FlowFixMe})))[\n        propKey\n      ] = null;\n      if (!removedKeys) {\n        removedKeys = ({}: {[string]: boolean});\n      }\n      if (!removedKeys[propKey]) {\n        removedKeys[propKey] = true;\n        removedKeyCount++;\n      }\n    } else {\n      // default:\n      // This is a nested attribute configuration where all the properties\n      // were removed so we need to go through and clear out all of them.\n      updatePayload = clearNestedProperty(\n        updatePayload,\n        prevProp,\n        ((attributeConfig: any): AttributeConfiguration),\n      );\n    }\n  }\n  return updatePayload;\n}\n\n/**\n * addProperties adds all the valid props to the payload after being processed.\n */\nfunction addProperties(\n  updatePayload: null | Object,\n  props: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  // TODO: Fast path\n  return diffProperties(updatePayload, emptyObject, props, validAttributes);\n}\n\n/**\n * clearProperties clears all the previous props by adding a null sentinel\n * to the payload for each valid key.\n */\nfunction clearProperties(\n  updatePayload: null | Object,\n  prevProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  // TODO: Fast path\n  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);\n}\n\nexport function create(\n  props: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  return addProperties(\n    null, // updatePayload\n    props,\n    validAttributes,\n  );\n}\n\nexport function diff(\n  prevProps: Object,\n  nextProps: Object,\n  validAttributes: AttributeConfiguration,\n): null | Object {\n  return diffProperties(\n    null, // updatePayload\n    prevProps,\n    nextProps,\n    validAttributes,\n  );\n}\n"],"mappings":";;;;;;AAYA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,WAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,IAAME,WAAW,GAAG,CAAC,CAAC;AActB,IAAIC,WAAuC,GAAG,IAAI;AAClD,IAAIC,eAAe,GAAG,CAAC;AAEvB,IAAMC,iBAAiB,GAAG;EACxBC,uBAAuB,EAAE;AAC3B,CAAC;AAED,SAASC,aAAaA,CAACC,QAAe,EAAEC,QAAe,EAAW;EAChE,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;IAErD,OAAO,IAAI;EACb,CAAC,MAAM;IAEL,OAAO,IAAAC,mBAAU,EAACF,QAAQ,EAAEC,QAAQ,EAAEJ,iBAAiB,CAAC;EAC1D;AACF;AAEA,SAASM,iCAAiCA,CACxCC,aAAqB,EACrBC,IAAgB,EAChBC,eAAuC,EACvC;EACA,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACvB,IAAII,CAAC,GAAGJ,IAAI,CAACK,MAAM;IACnB,OAAOD,CAAC,EAAE,IAAIb,eAAe,GAAG,CAAC,EAAE;MACjCO,iCAAiC,CAC/BC,aAAa,EACbC,IAAI,CAACI,CAAC,CAAC,EACPH,eACF,CAAC;IACH;EACF,CAAC,MAAM,IAAID,IAAI,IAAIT,eAAe,GAAG,CAAC,EAAE;IACtC,IAAMe,GAAG,GAAGN,IAAI;IAChB,KAAK,IAAMO,OAAO,IAAIjB,WAAW,EAAE;MAEjC,IAAI,CAACA,WAAW,CAACiB,OAAO,CAAC,EAAE;QACzB;MACF;MACA,IAAIX,QAAQ,GAAGU,GAAG,CAACC,OAAO,CAAC;MAC3B,IAAIX,QAAQ,KAAKY,SAAS,EAAE;QAC1B;MACF;MAEA,IAAMC,eAAe,GAAGR,eAAe,CAACM,OAAO,CAAC;MAChD,IAAI,CAACE,eAAe,EAAE;QACpB;MACF;MAEA,IAAI,OAAOb,QAAQ,KAAK,UAAU,EAAE;QAElCA,QAAQ,GAAG,IAAI;MACjB;MACA,IAAI,OAAOA,QAAQ,KAAK,WAAW,EAAE;QAEnCA,QAAQ,GAAG,IAAI;MACjB;MAEA,IAAI,OAAOa,eAAe,KAAK,QAAQ,EAAE;QAEvCV,aAAa,CAACQ,OAAO,CAAC,GAAGX,QAAQ;MACnC,CAAC,MAAM,IACL,OAAOa,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;QAEA,IAAMC,SAAS,GACb,OAAOH,eAAe,CAACE,OAAO,KAAK,UAAU,GACzCF,eAAe,CAACE,OAAO,CAACf,QAAQ,CAAC,GACjCA,QAAQ;QACdG,aAAa,CAACQ,OAAO,CAAC,GAAGK,SAAS;MACpC;MAEAtB,WAAW,CAACiB,OAAO,CAAC,GAAG,KAAK;MAC5BhB,eAAe,EAAE;IACnB;EACF;AACF;AAEA,SAASsB,uBAAuBA,CAC9Bd,aAA4B,EAC5Be,SAA4B,EAC5BC,SAA4B,EAC5Bd,eAAuC,EACxB;EACf,IAAMe,SAAS,GACbF,SAAS,CAACT,MAAM,GAAGU,SAAS,CAACV,MAAM,GAAGS,SAAS,CAACT,MAAM,GAAGU,SAAS,CAACV,MAAM;EAC3E,IAAID,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,SAAS,EAAEZ,CAAC,EAAE,EAAE;IAG9BL,aAAa,GAAGkB,kBAAkB,CAChClB,aAAa,EACbe,SAAS,CAACV,CAAC,CAAC,EACZW,SAAS,CAACX,CAAC,CAAC,EACZH,eACF,CAAC;EACH;EACA,OAAOG,CAAC,GAAGU,SAAS,CAACT,MAAM,EAAED,CAAC,EAAE,EAAE;IAEhCL,aAAa,GAAGmB,mBAAmB,CACjCnB,aAAa,EACbe,SAAS,CAACV,CAAC,CAAC,EACZH,eACF,CAAC;EACH;EACA,OAAOG,CAAC,GAAGW,SAAS,CAACV,MAAM,EAAED,CAAC,EAAE,EAAE;IAEhCL,aAAa,GAAGoB,iBAAiB,CAC/BpB,aAAa,EACbgB,SAAS,CAACX,CAAC,CAAC,EACZH,eACF,CAAC;EACH;EACA,OAAOF,aAAa;AACtB;AAEA,SAASkB,kBAAkBA,CACzBlB,aAA4B,EAC5BJ,QAAoB,EACpBC,QAAoB,EACpBK,eAAuC,EACxB;EACf,IAAI,CAACF,aAAa,IAAIJ,QAAQ,KAAKC,QAAQ,EAAE;IAG3C,OAAOG,aAAa;EACtB;EAEA,IAAI,CAACJ,QAAQ,IAAI,CAACC,QAAQ,EAAE;IAC1B,IAAIA,QAAQ,EAAE;MACZ,OAAOuB,iBAAiB,CAACpB,aAAa,EAAEH,QAAQ,EAAEK,eAAe,CAAC;IACpE;IACA,IAAIN,QAAQ,EAAE;MACZ,OAAOuB,mBAAmB,CAACnB,aAAa,EAAEJ,QAAQ,EAAEM,eAAe,CAAC;IACtE;IACA,OAAOF,aAAa;EACtB;EAEA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,IAAI,CAACO,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,EAAE;IAExD,OAAOwB,cAAc,CAACrB,aAAa,EAAEJ,QAAQ,EAAEC,QAAQ,EAAEK,eAAe,CAAC;EAC3E;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,IAAIO,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,EAAE;IAEtD,OAAOiB,uBAAuB,CAC5Bd,aAAa,EACbJ,QAAQ,EACRC,QAAQ,EACRK,eACF,CAAC;EACH;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,EAAE;IAC3B,OAAOyB,cAAc,CACnBrB,aAAa,EAEb,IAAAsB,qBAAY,EAAC1B,QAAQ,CAAC,EAEtBC,QAAQ,EACRK,eACF,CAAC;EACH;EAEA,OAAOmB,cAAc,CACnBrB,aAAa,EACbJ,QAAQ,EAER,IAAA0B,qBAAY,EAACzB,QAAQ,CAAC,EACtBK,eACF,CAAC;AACH;AAOA,SAASkB,iBAAiBA,CACxBpB,aAA4B,EAC5BH,QAAoB,EACpBK,eAAuC,EAC3B;EACZ,IAAI,CAACL,QAAQ,EAAE;IACb,OAAOG,aAAa;EACtB;EAEA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,EAAE;IAE5B,OAAO0B,aAAa,CAACvB,aAAa,EAAEH,QAAQ,EAAEK,eAAe,CAAC;EAChE;EAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACS,MAAM,EAAED,CAAC,EAAE,EAAE;IAExCL,aAAa,GAAGoB,iBAAiB,CAC/BpB,aAAa,EACbH,QAAQ,CAACQ,CAAC,CAAC,EACXH,eACF,CAAC;EACH;EAEA,OAAOF,aAAa;AACtB;AAMA,SAASmB,mBAAmBA,CAC1BnB,aAA4B,EAC5BJ,QAAoB,EACpBM,eAAuC,EACxB;EACf,IAAI,CAACN,QAAQ,EAAE;IACb,OAAOI,aAAa;EACtB;EAEA,IAAI,CAACG,KAAK,CAACC,OAAO,CAACR,QAAQ,CAAC,EAAE;IAE5B,OAAO4B,eAAe,CAACxB,aAAa,EAAEJ,QAAQ,EAAEM,eAAe,CAAC;EAClE;EAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,QAAQ,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IAExCL,aAAa,GAAGmB,mBAAmB,CACjCnB,aAAa,EACbJ,QAAQ,CAACS,CAAC,CAAC,EACXH,eACF,CAAC;EACH;EACA,OAAOF,aAAa;AACtB;AAQA,SAASqB,cAAcA,CACrBrB,aAA4B,EAC5ByB,SAAiB,EACjBC,SAAiB,EACjBxB,eAAuC,EACxB;EACf,IAAIQ,eAAe;EACnB,IAAIb,QAAQ;EACZ,IAAID,QAAQ;EAEZ,KAAK,IAAMY,OAAO,IAAIkB,SAAS,EAAE;IAC/BhB,eAAe,GAAGR,eAAe,CAACM,OAAO,CAAC;IAC1C,IAAI,CAACE,eAAe,EAAE;MACpB;IACF;IAEAd,QAAQ,GAAG6B,SAAS,CAACjB,OAAO,CAAC;IAC7BX,QAAQ,GAAG6B,SAAS,CAAClB,OAAO,CAAC;IAI7B,IAAI,OAAOX,QAAQ,KAAK,UAAU,EAAE;MAClCA,QAAQ,GAAI,IAAU;MAGtB,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,GAAI,IAAU;MACxB;IACF;IAIA,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;MACnCA,QAAQ,GAAI,IAAU;MACtB,IAAI,OAAOD,QAAQ,KAAK,WAAW,EAAE;QACnCA,QAAQ,GAAI,IAAU;MACxB;IACF;IAEA,IAAIL,WAAW,EAAE;MACfA,WAAW,CAACiB,OAAO,CAAC,GAAG,KAAK;IAC9B;IAEA,IAAIR,aAAa,IAAIA,aAAa,CAACQ,OAAO,CAAC,KAAKC,SAAS,EAAE;MAOzD,IAAI,OAAOC,eAAe,KAAK,QAAQ,EAAE;QAEvCV,aAAa,CAACQ,OAAO,CAAC,GAAGX,QAAQ;MACnC,CAAC,MAAM,IACL,OAAOa,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;QAEA,IAAMC,SAAS,GACb,OAAOH,eAAe,CAACE,OAAO,KAAK,UAAU,GACzCF,eAAe,CAACE,OAAO,CAACf,QAAQ,CAAC,GACjCA,QAAQ;QACdG,aAAa,CAACQ,OAAO,CAAC,GAAGK,SAAS;MACpC;MACA;IACF;IAEA,IAAIjB,QAAQ,KAAKC,QAAQ,EAAE;MACzB;IACF;IAGA,IAAI,OAAOa,eAAe,KAAK,QAAQ,EAAE;MAEvC,IAAIf,aAAa,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;QAErC,CAACG,aAAa,KAAKA,aAAa,GAAI,CAAC,CAA0B,CAAC,EAC9DQ,OAAO,CACR,GAAGX,QAAQ;MACd;IACF,CAAC,MAAM,IACL,OAAOa,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;MAEA,IAAMe,YAAY,GAChB/B,QAAQ,KAAKa,SAAS,KACrB,OAAOC,eAAe,CAACC,IAAI,KAAK,UAAU,GACvCD,eAAe,CAACC,IAAI,CAACf,QAAQ,EAAEC,QAAQ,CAAC,GACxCF,aAAa,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CAAC;MACxC,IAAI8B,YAAY,EAAE;QAChB,IAAMd,UAAS,GACb,OAAOH,eAAe,CAACE,OAAO,KAAK,UAAU,GAEzCF,eAAe,CAACE,OAAO,CAACf,QAAQ,CAAC,GACjCA,QAAQ;QACd,CAACG,aAAa,KAAKA,aAAa,GAAI,CAAC,CAA0B,CAAC,EAC9DQ,OAAO,CACR,GAAGK,UAAS;MACf;IACF,CAAC,MAAM;MAELtB,WAAW,GAAG,IAAI;MAClBC,eAAe,GAAG,CAAC;MAGnBQ,aAAa,GAAGkB,kBAAkB,CAChClB,aAAa,EACbJ,QAAQ,EACRC,QAAQ,EACNa,eACJ,CAAC;MACD,IAAIlB,eAAe,GAAG,CAAC,IAAIQ,aAAa,EAAE;QACxCD,iCAAiC,CAC/BC,aAAa,EACbH,QAAQ,EACNa,eACJ,CAAC;QACDnB,WAAW,GAAG,IAAI;MACpB;IACF;EACF;EAKA,KAAK,IAAMiB,QAAO,IAAIiB,SAAS,EAAE;IAC/B,IAAIC,SAAS,CAAClB,QAAO,CAAC,KAAKC,SAAS,EAAE;MACpC;IACF;IACAC,eAAe,GAAGR,eAAe,CAACM,QAAO,CAAC;IAC1C,IAAI,CAACE,eAAe,EAAE;MACpB;IACF;IAEA,IAAIV,aAAa,IAAIA,aAAa,CAACQ,QAAO,CAAC,KAAKC,SAAS,EAAE;MAEzD;IACF;IAEAb,QAAQ,GAAG6B,SAAS,CAACjB,QAAO,CAAC;IAC7B,IAAIZ,QAAQ,KAAKa,SAAS,EAAE;MAC1B;IACF;IAEA,IACE,OAAOC,eAAe,KAAK,QAAQ,IACnC,OAAOA,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;MAGA,CAACZ,aAAa,KAAKA,aAAa,GAAI,CAAC,CAA0B,CAAC,EAC9DQ,QAAO,CACR,GAAG,IAAI;MACR,IAAI,CAACjB,WAAW,EAAE;QAChBA,WAAW,GAAI,CAAC,CAAuB;MACzC;MACA,IAAI,CAACA,WAAW,CAACiB,QAAO,CAAC,EAAE;QACzBjB,WAAW,CAACiB,QAAO,CAAC,GAAG,IAAI;QAC3BhB,eAAe,EAAE;MACnB;IACF,CAAC,MAAM;MAILQ,aAAa,GAAGmB,mBAAmB,CACjCnB,aAAa,EACbJ,QAAQ,EACNc,eACJ,CAAC;IACH;EACF;EACA,OAAOV,aAAa;AACtB;AAKA,SAASuB,aAAaA,CACpBvB,aAA4B,EAC5B4B,KAAa,EACb1B,eAAuC,EACxB;EAEf,OAAOmB,cAAc,CAACrB,aAAa,EAAEV,WAAW,EAAEsC,KAAK,EAAE1B,eAAe,CAAC;AAC3E;AAMA,SAASsB,eAAeA,CACtBxB,aAA4B,EAC5ByB,SAAiB,EACjBvB,eAAuC,EACxB;EAEf,OAAOmB,cAAc,CAACrB,aAAa,EAAEyB,SAAS,EAAEnC,WAAW,EAAEY,eAAe,CAAC;AAC/E;AAEO,SAAS2B,MAAMA,CACpBD,KAAa,EACb1B,eAAuC,EACxB;EACf,OAAOqB,aAAa,CAClB,IAAI,EACJK,KAAK,EACL1B,eACF,CAAC;AACH;AAEO,SAASS,IAAIA,CAClBc,SAAiB,EACjBC,SAAiB,EACjBxB,eAAuC,EACxB;EACf,OAAOmB,cAAc,CACnB,IAAI,EACJI,SAAS,EACTC,SAAS,EACTxB,eACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}