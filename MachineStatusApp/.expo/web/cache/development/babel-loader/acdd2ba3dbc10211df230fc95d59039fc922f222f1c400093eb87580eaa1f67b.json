{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar TurboModuleRegistry = _interopRequireWildcard(require(\"../../../../../Libraries/TurboModule/TurboModuleRegistry\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar _default = exports.default = TurboModuleRegistry.get('NativePerformanceCxx');","map":{"version":3,"names":["TurboModuleRegistry","_interopRequireWildcard","require","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_default","exports"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/src/private/webapis/performance/specs/NativePerformance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nexport type NativeMemoryInfo = {[key: string]: ?number};\n\nexport type ReactNativeStartupTiming = {[key: string]: ?number};\n\nexport type RawPerformanceEntryType = number;\n\nexport type RawPerformanceEntry = {\n  name: string,\n  entryType: RawPerformanceEntryType,\n  startTime: number,\n  duration: number,\n\n  // For \"event\" entries only:\n  processingStart?: number,\n  processingEnd?: number,\n  interactionId?: number,\n};\n\nexport type OpaqueNativeObserverHandle = mixed;\n\nexport type NativeBatchedObserverCallback = () => void;\nexport type NativePerformanceMarkResult = number;\nexport type NativePerformanceMeasureResult = $ReadOnlyArray<number>; // [startTime, duration]\n\nexport type PerformanceObserverInit = {\n  entryTypes?: $ReadOnlyArray<number>,\n  type?: number,\n  buffered?: boolean,\n  durationThreshold?: number,\n};\n\nexport interface Spec extends TurboModule {\n  +now?: () => number;\n  +markWithResult?: (\n    name: string,\n    startTime?: number,\n  ) => NativePerformanceMarkResult;\n  +measureWithResult?: (\n    name: string,\n    startTime: number,\n    endTime: number,\n    duration?: number,\n    startMark?: string,\n    endMark?: string,\n  ) => NativePerformanceMeasureResult;\n  +clearMarks?: (entryName?: string) => void;\n  +clearMeasures?: (entryName?: string) => void;\n  +getEntries?: () => $ReadOnlyArray<RawPerformanceEntry>;\n  +getEntriesByName?: (\n    entryName: string,\n    entryType?: ?RawPerformanceEntryType,\n  ) => $ReadOnlyArray<RawPerformanceEntry>;\n  +getEntriesByType?: (\n    entryType: RawPerformanceEntryType,\n  ) => $ReadOnlyArray<RawPerformanceEntry>;\n  +getEventCounts?: () => $ReadOnlyArray<[string, number]>;\n  +getSimpleMemoryInfo: () => NativeMemoryInfo;\n  +getReactNativeStartupTiming: () => ReactNativeStartupTiming;\n\n  +createObserver?: (\n    callback: NativeBatchedObserverCallback,\n  ) => OpaqueNativeObserverHandle;\n  +getDroppedEntriesCount?: (observer: OpaqueNativeObserverHandle) => number;\n\n  +observe?: (\n    observer: OpaqueNativeObserverHandle,\n    options: PerformanceObserverInit,\n  ) => void;\n  +disconnect?: (observer: OpaqueNativeObserverHandle) => void;\n  +takeRecords?: (\n    observer: OpaqueNativeObserverHandle,\n    sort: boolean,\n  ) => $ReadOnlyArray<RawPerformanceEntry>;\n\n  +getSupportedPerformanceEntryTypes?: () => $ReadOnlyArray<RawPerformanceEntryType>;\n}\n\nexport default (TurboModuleRegistry.get<Spec>('NativePerformanceCxx'): ?Spec);\n"],"mappings":";;;;AAYA,IAAAA,mBAAA,GAAAC,uBAAA,CAAAC,OAAA;AAAgG,SAAAD,wBAAAE,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAJ,uBAAA,YAAAA,wBAAAE,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,cAAAM,EAAA,IAAAd,CAAA,gBAAAc,EAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,EAAA,OAAAP,CAAA,IAAAD,CAAA,GAAAW,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAc,EAAA,OAAAP,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAM,EAAA,EAAAP,CAAA,IAAAC,CAAA,CAAAM,EAAA,IAAAd,CAAA,CAAAc,EAAA,WAAAN,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAAA,IAAAmB,QAAA,GAAAC,OAAA,CAAAX,OAAA,GA+EhFb,mBAAmB,CAACe,GAAG,CAAO,sBAAsB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}