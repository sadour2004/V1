{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _ListMetricsAggregator = _interopRequireDefault(require(\"./ListMetricsAggregator\"));\nvar Info = (0, _createClass2.default)(function Info() {\n  (0, _classCallCheck2.default)(this, Info);\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n});\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\nvar _sampleRate = DEBUG ? 1 : null;\nvar FillRateHelper = function () {\n  function FillRateHelper(listMetrics) {\n    (0, _classCallCheck2.default)(this, FillRateHelper);\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n  return (0, _createClass2.default)(FillRateHelper, [{\n    key: \"activate\",\n    value: function activate() {\n      if (this._enabled && this._samplesStartTime == null) {\n        DEBUG && console.debug('FillRateHelper: activate');\n        this._samplesStartTime = global.performance.now();\n      }\n    }\n  }, {\n    key: \"deactivateAndFlush\",\n    value: function deactivateAndFlush() {\n      if (!this._enabled) {\n        return;\n      }\n      var start = this._samplesStartTime;\n      if (start == null) {\n        DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n        return;\n      }\n      if (this._info.sample_count < _minSampleCount) {\n        this._resetData();\n        return;\n      }\n      var total_time_spent = global.performance.now() - start;\n      var info = Object.assign({}, this._info, {\n        total_time_spent: total_time_spent\n      });\n      if (DEBUG) {\n        var derived = {\n          avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n          avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n          avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n          any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n          any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n          mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n          mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n        };\n        for (var key in derived) {\n          derived[key] = Math.round(1000 * derived[key]) / 1000;\n        }\n        console.debug('FillRateHelper deactivateAndFlush: ', {\n          derived: derived,\n          info: info\n        });\n      }\n      _listeners.forEach(function (listener) {\n        return listener(info);\n      });\n      this._resetData();\n    }\n  }, {\n    key: \"computeBlankness\",\n    value: function computeBlankness(props, cellsAroundViewport, scrollMetrics) {\n      if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {\n        return 0;\n      }\n      var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n      this._info.sample_count++;\n      this._info.pixels_sampled += Math.round(visibleLength);\n      this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n      var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n      var now = global.performance.now();\n      if (this._anyBlankStartTime != null) {\n        this._info.any_blank_ms += now - this._anyBlankStartTime;\n      }\n      this._anyBlankStartTime = null;\n      if (this._mostlyBlankStartTime != null) {\n        this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n      }\n      this._mostlyBlankStartTime = null;\n      var blankTop = 0;\n      var first = cellsAroundViewport.first;\n      var firstFrame = this._listMetrics.getCellMetrics(first, props);\n      while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.isMounted)) {\n        firstFrame = this._listMetrics.getCellMetrics(first, props);\n        first++;\n      }\n      if (firstFrame && first > 0) {\n        blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n      }\n      var blankBottom = 0;\n      var last = cellsAroundViewport.last;\n      var lastFrame = this._listMetrics.getCellMetrics(last, props);\n      while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.isMounted)) {\n        lastFrame = this._listMetrics.getCellMetrics(last, props);\n        last--;\n      }\n      if (lastFrame && last < props.getItemCount(props.data) - 1) {\n        var bottomEdge = lastFrame.offset + lastFrame.length;\n        blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n      }\n      var pixels_blank = Math.round(blankTop + blankBottom);\n      var blankness = pixels_blank / visibleLength;\n      if (blankness > 0) {\n        this._anyBlankStartTime = now;\n        this._info.any_blank_speed_sum += scrollSpeed;\n        this._info.any_blank_count++;\n        this._info.pixels_blank += pixels_blank;\n        if (blankness > 0.5) {\n          this._mostlyBlankStartTime = now;\n          this._info.mostly_blank_count++;\n        }\n      } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n        this.deactivateAndFlush();\n      }\n      return blankness;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled() {\n      return this._enabled;\n    }\n  }, {\n    key: \"_resetData\",\n    value: function _resetData() {\n      this._anyBlankStartTime = null;\n      this._info = new Info();\n      this._mostlyBlankStartTime = null;\n      this._samplesStartTime = null;\n    }\n  }], [{\n    key: \"addListener\",\n    value: function addListener(callback) {\n      if (_sampleRate === null) {\n        console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n      }\n      _listeners.push(callback);\n      return {\n        remove: function remove() {\n          _listeners = _listeners.filter(function (listener) {\n            return callback !== listener;\n          });\n        }\n      };\n    }\n  }, {\n    key: \"setSampleRate\",\n    value: function setSampleRate(sampleRate) {\n      _sampleRate = sampleRate;\n    }\n  }, {\n    key: \"setMinSampleCount\",\n    value: function setMinSampleCount(minSampleCount) {\n      _minSampleCount = minSampleCount;\n    }\n  }]);\n}();\nvar _default = exports.default = FillRateHelper;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createClass2","_classCallCheck2","_ListMetricsAggregator","Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","listMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_listMetrics","Math","random","_resetData","key","activate","console","debug","global","performance","now","deactivateAndFlush","start","info","assign","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","round","forEach","listener","computeBlankness","props","cellsAroundViewport","scrollMetrics","getItemCount","data","last","first","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","firstFrame","getCellMetrics","isMounted","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","enabled","addListener","callback","warn","push","remove","filter","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","_default"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/@react-native/virtualized-lists/Lists/FillRateHelper.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {CellMetricProps} from './ListMetricsAggregator';\n\nimport ListMetricsAggregator from './ListMetricsAggregator';\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count: number = 0;\n  any_blank_ms: number = 0;\n  any_blank_speed_sum: number = 0;\n  mostly_blank_count: number = 0;\n  mostly_blank_ms: number = 0;\n  pixels_blank: number = 0;\n  pixels_sampled: number = 0;\n  pixels_scrolled: number = 0;\n  total_time_spent: number = 0;\n  sample_count: number = 0;\n}\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime: ?number = null;\n  _enabled = false;\n  _listMetrics: ListMetricsAggregator;\n  _info: Info = new Info();\n  _mostlyBlankStartTime: ?number = null;\n  _samplesStartTime: ?number = null;\n\n  static addListener(callback: FillRateInfo => void): {\n    remove: () => void,\n    ...\n  } {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(listMetrics: ListMetricsAggregator) {\n    this._listMetrics = listMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = global.performance.now() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        // $FlowFixMe[prop-missing]\n        // $FlowFixMe[invalid-computed-prop]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      ...CellMetricProps,\n      initialNumToRender?: ?number,\n      ...\n    },\n    cellsAroundViewport: {\n      first: number,\n      last: number,\n      ...\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n      ...\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      cellsAroundViewport.last < cellsAroundViewport.first ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = cellsAroundViewport.first;\n    let firstFrame = this._listMetrics.getCellMetrics(first, props);\n    while (\n      first <= cellsAroundViewport.last &&\n      (!firstFrame || !firstFrame.isMounted)\n    ) {\n      firstFrame = this._listMetrics.getCellMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = cellsAroundViewport.last;\n    let lastFrame = this._listMetrics.getCellMetrics(last, props);\n    while (\n      last >= cellsAroundViewport.first &&\n      (!lastFrame || !lastFrame.isMounted)\n    ) {\n      lastFrame = this._listMetrics.getCellMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nexport default FillRateHelper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}