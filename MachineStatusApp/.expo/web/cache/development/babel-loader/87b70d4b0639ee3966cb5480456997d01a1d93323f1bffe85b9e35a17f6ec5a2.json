{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addChangeListener = addChangeListener;\nexports.getColorScheme = getColorScheme;\nexports.setColorScheme = setColorScheme;\nvar _NativeEventEmitter = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\nvar _EventEmitter = _interopRequireDefault(require(\"../vendor/emitter/EventEmitter\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar lazyState;\nfunction getState() {\n  if (lazyState != null) {\n    return lazyState;\n  }\n  var eventEmitter = new _EventEmitter.default();\n  var NativeAppearance = require('./NativeAppearance').default;\n  if (NativeAppearance == null) {\n    lazyState = {\n      NativeAppearance: null,\n      appearance: null,\n      eventEmitter: eventEmitter\n    };\n  } else {\n    var state = {\n      NativeAppearance: NativeAppearance,\n      appearance: null,\n      eventEmitter: eventEmitter\n    };\n    new _NativeEventEmitter.default(NativeAppearance).addListener('appearanceChanged', function (newAppearance) {\n      state.appearance = {\n        colorScheme: toColorScheme(newAppearance.colorScheme)\n      };\n      eventEmitter.emit('change', state.appearance);\n    });\n    lazyState = state;\n  }\n  return lazyState;\n}\nfunction getColorScheme() {\n  var colorScheme = null;\n  var state = getState();\n  var NativeAppearance = state.NativeAppearance;\n  if (NativeAppearance != null) {\n    if (state.appearance == null) {\n      state.appearance = {\n        colorScheme: toColorScheme(NativeAppearance.getColorScheme())\n      };\n    }\n    colorScheme = state.appearance.colorScheme;\n  }\n  return colorScheme;\n}\nfunction setColorScheme(colorScheme) {\n  var state = getState();\n  var NativeAppearance = state.NativeAppearance;\n  if (NativeAppearance != null) {\n    NativeAppearance.setColorScheme(colorScheme != null ? colorScheme : 'unspecified');\n    state.appearance = {\n      colorScheme: toColorScheme(NativeAppearance.getColorScheme())\n    };\n  }\n}\nfunction addChangeListener(listener) {\n  var _getState = getState(),\n    eventEmitter = _getState.eventEmitter;\n  return eventEmitter.addListener('change', listener);\n}\nfunction toColorScheme(colorScheme) {\n  (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\");\n  return colorScheme;\n}","map":{"version":3,"names":["_NativeEventEmitter","_interopRequireDefault","require","_EventEmitter","_invariant","lazyState","getState","eventEmitter","EventEmitter","NativeAppearance","default","appearance","state","NativeEventEmitter","addListener","newAppearance","colorScheme","toColorScheme","emit","getColorScheme","setColorScheme","addChangeListener","listener","_getState","invariant"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Utilities/Appearance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\nimport type {AppearancePreferences, ColorSchemeName} from './NativeAppearance';\nimport typeof INativeAppearance from './NativeAppearance';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport invariant from 'invariant';\n\ntype Appearance = {\n  colorScheme: ?ColorSchemeName,\n};\n\nlet lazyState: ?{\n  +NativeAppearance: INativeAppearance,\n  // Cache the color scheme to reduce the cost of reading it between changes.\n  // NOTE: If `NativeAppearance` is null, this will always be null.\n  appearance: ?Appearance,\n  // NOTE: This is non-nullable to make it easier for `onChangedListener` to\n  // return a non-nullable `EventSubscription` value. This is not the common\n  // path, so we do not have to over-optimize it.\n  +eventEmitter: EventEmitter<{change: [Appearance]}>,\n};\n\n/**\n * Ensures that all state and listeners are lazily initialized correctly.\n */\nfunction getState(): $NonMaybeType<typeof lazyState> {\n  if (lazyState != null) {\n    return lazyState;\n  }\n  const eventEmitter = new EventEmitter<{change: [Appearance]}>();\n  // NOTE: Avoid initializing `NativeAppearance` until it is actually used.\n  const NativeAppearance = require('./NativeAppearance').default;\n  if (NativeAppearance == null) {\n    // Assign `null` to avoid re-initializing on subsequent invocations.\n    lazyState = {\n      NativeAppearance: null,\n      appearance: null,\n      eventEmitter,\n    };\n  } else {\n    const state: $NonMaybeType<typeof lazyState> = {\n      NativeAppearance,\n      appearance: null,\n      eventEmitter,\n    };\n    new NativeEventEmitter<{\n      appearanceChanged: [AppearancePreferences],\n    }>(NativeAppearance).addListener('appearanceChanged', newAppearance => {\n      state.appearance = {\n        colorScheme: toColorScheme(newAppearance.colorScheme),\n      };\n      eventEmitter.emit('change', state.appearance);\n    });\n    lazyState = state;\n  }\n  return lazyState;\n}\n\n/**\n * Returns the current color scheme preference. This value may change, so the\n * value should not be cached without either listening to changes or using\n * the `useColorScheme` hook.\n */\nexport function getColorScheme(): ?ColorSchemeName {\n  let colorScheme = null;\n  const state = getState();\n  const {NativeAppearance} = state;\n  if (NativeAppearance != null) {\n    if (state.appearance == null) {\n      // Lazily initialize `state.appearance`. This should only\n      // happen once because we never reassign a null value to it.\n      state.appearance = {\n        colorScheme: toColorScheme(NativeAppearance.getColorScheme()),\n      };\n    }\n    colorScheme = state.appearance.colorScheme;\n  }\n  return colorScheme;\n}\n\n/**\n * Updates the current color scheme to the supplied value.\n */\nexport function setColorScheme(colorScheme: ?ColorSchemeName): void {\n  const state = getState();\n  const {NativeAppearance} = state;\n  if (NativeAppearance != null) {\n    NativeAppearance.setColorScheme(colorScheme ?? 'unspecified');\n    state.appearance = {\n      colorScheme: toColorScheme(NativeAppearance.getColorScheme()),\n    };\n  }\n}\n\n/**\n * Add an event handler that is fired when appearance preferences change.\n */\nexport function addChangeListener(\n  listener: ({colorScheme: ?ColorSchemeName}) => void,\n): EventSubscription {\n  const {eventEmitter} = getState();\n  return eventEmitter.addListener('change', listener);\n}\n\n/**\n * TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n */\nfunction toColorScheme(colorScheme: ?string): ?ColorSchemeName {\n  invariant(\n    colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null,\n    \"Unrecognized color scheme. Did you mean 'dark', 'light' or null?\",\n  );\n  return colorScheme;\n}\n"],"mappings":";;;;;;;AAcA,IAAAA,mBAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,aAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,UAAA,GAAAH,sBAAA,CAAAC,OAAA;AAMA,IAAIG,SASH;AAKD,SAASC,QAAQA,CAAA,EAAoC;EACnD,IAAID,SAAS,IAAI,IAAI,EAAE;IACrB,OAAOA,SAAS;EAClB;EACA,IAAME,YAAY,GAAG,IAAIC,qBAAY,CAAyB,CAAC;EAE/D,IAAMC,gBAAgB,GAAGP,OAAO,CAAC,oBAAoB,CAAC,CAACQ,OAAO;EAC9D,IAAID,gBAAgB,IAAI,IAAI,EAAE;IAE5BJ,SAAS,GAAG;MACVI,gBAAgB,EAAE,IAAI;MACtBE,UAAU,EAAE,IAAI;MAChBJ,YAAY,EAAZA;IACF,CAAC;EACH,CAAC,MAAM;IACL,IAAMK,KAAsC,GAAG;MAC7CH,gBAAgB,EAAhBA,gBAAgB;MAChBE,UAAU,EAAE,IAAI;MAChBJ,YAAY,EAAZA;IACF,CAAC;IACD,IAAIM,2BAAkB,CAEnBJ,gBAAgB,CAAC,CAACK,WAAW,CAAC,mBAAmB,EAAE,UAAAC,aAAa,EAAI;MACrEH,KAAK,CAACD,UAAU,GAAG;QACjBK,WAAW,EAAEC,aAAa,CAACF,aAAa,CAACC,WAAW;MACtD,CAAC;MACDT,YAAY,CAACW,IAAI,CAAC,QAAQ,EAAEN,KAAK,CAACD,UAAU,CAAC;IAC/C,CAAC,CAAC;IACFN,SAAS,GAAGO,KAAK;EACnB;EACA,OAAOP,SAAS;AAClB;AAOO,SAASc,cAAcA,CAAA,EAAqB;EACjD,IAAIH,WAAW,GAAG,IAAI;EACtB,IAAMJ,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,IAAOG,gBAAgB,GAAIG,KAAK,CAAzBH,gBAAgB;EACvB,IAAIA,gBAAgB,IAAI,IAAI,EAAE;IAC5B,IAAIG,KAAK,CAACD,UAAU,IAAI,IAAI,EAAE;MAG5BC,KAAK,CAACD,UAAU,GAAG;QACjBK,WAAW,EAAEC,aAAa,CAACR,gBAAgB,CAACU,cAAc,CAAC,CAAC;MAC9D,CAAC;IACH;IACAH,WAAW,GAAGJ,KAAK,CAACD,UAAU,CAACK,WAAW;EAC5C;EACA,OAAOA,WAAW;AACpB;AAKO,SAASI,cAAcA,CAACJ,WAA6B,EAAQ;EAClE,IAAMJ,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,IAAOG,gBAAgB,GAAIG,KAAK,CAAzBH,gBAAgB;EACvB,IAAIA,gBAAgB,IAAI,IAAI,EAAE;IAC5BA,gBAAgB,CAACW,cAAc,CAACJ,WAAW,WAAXA,WAAW,GAAI,aAAa,CAAC;IAC7DJ,KAAK,CAACD,UAAU,GAAG;MACjBK,WAAW,EAAEC,aAAa,CAACR,gBAAgB,CAACU,cAAc,CAAC,CAAC;IAC9D,CAAC;EACH;AACF;AAKO,SAASE,iBAAiBA,CAC/BC,QAAmD,EAChC;EACnB,IAAAC,SAAA,GAAuBjB,QAAQ,CAAC,CAAC;IAA1BC,YAAY,GAAAgB,SAAA,CAAZhB,YAAY;EACnB,OAAOA,YAAY,CAACO,WAAW,CAAC,QAAQ,EAAEQ,QAAQ,CAAC;AACrD;AAKA,SAASL,aAAaA,CAACD,WAAoB,EAAoB;EAC7D,IAAAQ,kBAAS,EACPR,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK,OAAO,IAAIA,WAAW,IAAI,IAAI,EACxE,kEACF,CAAC;EACD,OAAOA,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}