{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = symbolicateStackTrace;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar getDevServer = require('./getDevServer').default;\nfunction symbolicateStackTrace(_x, _x2) {\n  return _symbolicateStackTrace.apply(this, arguments);\n}\nfunction _symbolicateStackTrace() {\n  _symbolicateStackTrace = (0, _asyncToGenerator2.default)(function* (stack, extraData) {\n    var _global$fetch;\n    var devServer = getDevServer();\n    if (!devServer.bundleLoadedFromServer) {\n      throw new Error('Bundle was not loaded from Metro.');\n    }\n    var fetch = (_global$fetch = global.fetch) != null ? _global$fetch : require('../../Network/fetch').fetch;\n    var response = yield fetch(devServer.url + 'symbolicate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        stack: stack,\n        extraData: extraData\n      })\n    });\n    return yield response.json();\n  });\n  return _symbolicateStackTrace.apply(this, arguments);\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","symbolicateStackTrace","_asyncToGenerator2","getDevServer","_x","_x2","_symbolicateStackTrace","apply","arguments","stack","extraData","_global$fetch","devServer","bundleLoadedFromServer","Error","fetch","global","response","url","method","headers","body","JSON","stringify","json"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport type {StackFrame} from '../NativeExceptionsManager';\n\nconst getDevServer = require('./getDevServer').default;\n\nexport type CodeFrame = $ReadOnly<{\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n}>;\n\nexport type SymbolicatedStackTrace = $ReadOnly<{\n  stack: Array<StackFrame>,\n  codeFrame: ?CodeFrame,\n}>;\n\nexport default async function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n  extraData?: mixed,\n): Promise<SymbolicatedStackTrace> {\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from Metro.');\n  }\n\n  // Lazy-load `fetch` until the first symbolication call to avoid circular requires.\n  const fetch = global.fetch ?? require('../../Network/fetch').fetch;\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({stack, extraData}),\n  });\n  return await response.json();\n}\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAAC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,KAAA;AAAA;AAAAD,OAAA,CAAAE,OAAA,GAAAC,qBAAA;AAAA,IAAAC,kBAAA,GAAAR,sBAAA,CAAAC,OAAA;AAIb,IAAMQ,YAAY,GAAGR,OAAO,CAAC,gBAAgB,CAAC,CAACK,OAAO;AAAC,SAiBzBC,qBAAqBA,CAAAG,EAAA,EAAAC,GAAA;EAAA,OAAAC,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,uBAAA;EAAAA,sBAAA,OAAAJ,kBAAA,CAAAF,OAAA,EAApC,WACbS,KAAwB,EACxBC,SAAiB,EACgB;IAAA,IAAAC,aAAA;IACjC,IAAMC,SAAS,GAAGT,YAAY,CAAC,CAAC;IAChC,IAAI,CAACS,SAAS,CAACC,sBAAsB,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;IAGA,IAAMC,KAAK,IAAAJ,aAAA,GAAGK,MAAM,CAACD,KAAK,YAAAJ,aAAA,GAAIhB,OAAO,CAAC,qBAAqB,CAAC,CAACoB,KAAK;IAClE,IAAME,QAAQ,SAASF,KAAK,CAACH,SAAS,CAACM,GAAG,GAAG,aAAa,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACd,KAAK,EAALA,KAAK;QAAEC,SAAS,EAATA;MAAS,CAAC;IACzC,CAAC,CAAC;IACF,aAAaO,QAAQ,CAACO,IAAI,CAAC,CAAC;EAC9B,CAAC;EAAA,OAAAlB,sBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}