{"ast":null,"code":"'use strict';\n\nif (global.RN$useAlwaysAvailableJSErrorHandling !== true) {\n  var ExceptionsManager = require('./ExceptionsManager').default;\n  ExceptionsManager.installConsoleErrorReporter();\n  if (!global.__fbDisableExceptionsManager) {\n    var handleError = function handleError(e, isFatal) {\n      try {\n        ExceptionsManager.handleException(e, isFatal);\n      } catch (ee) {\n        console.log('Failed to print error: ', ee.message);\n        throw e;\n      }\n    };\n    var ErrorUtils = require('../vendor/core/ErrorUtils').default;\n    ErrorUtils.setGlobalHandler(handleError);\n  }\n}","map":{"version":3,"names":["global","RN$useAlwaysAvailableJSErrorHandling","ExceptionsManager","require","default","installConsoleErrorReporter","__fbDisableExceptionsManager","handleError","e","isFatal","handleException","ee","console","log","message","ErrorUtils","setGlobalHandler"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Core/setUpErrorHandling.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nif (global.RN$useAlwaysAvailableJSErrorHandling !== true) {\n  /**\n   * Sets up the console and exception handling (redbox) for React Native.\n   * You can use this module directly, or just require InitializeCore.\n   */\n  const ExceptionsManager = require('./ExceptionsManager').default;\n  ExceptionsManager.installConsoleErrorReporter();\n\n  // Set up error handler\n  if (!global.__fbDisableExceptionsManager) {\n    const handleError = (e: mixed, isFatal: boolean) => {\n      try {\n        ExceptionsManager.handleException(e, isFatal);\n      } catch (ee) {\n        console.log('Failed to print error: ', ee.message);\n        throw e;\n      }\n    };\n\n    const ErrorUtils = require('../vendor/core/ErrorUtils').default;\n    ErrorUtils.setGlobalHandler(handleError);\n  }\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAIA,MAAM,CAACC,oCAAoC,KAAK,IAAI,EAAE;EAKxD,IAAMC,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC,CAACC,OAAO;EAChEF,iBAAiB,CAACG,2BAA2B,CAAC,CAAC;EAG/C,IAAI,CAACL,MAAM,CAACM,4BAA4B,EAAE;IACxC,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,CAAQ,EAAEC,OAAgB,EAAK;MAClD,IAAI;QACFP,iBAAiB,CAACQ,eAAe,CAACF,CAAC,EAAEC,OAAO,CAAC;MAC/C,CAAC,CAAC,OAAOE,EAAE,EAAE;QACXC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,EAAE,CAACG,OAAO,CAAC;QAClD,MAAMN,CAAC;MACT;IACF,CAAC;IAED,IAAMO,UAAU,GAAGZ,OAAO,CAAC,2BAA2B,CAAC,CAACC,OAAO;IAC/DW,UAAU,CAACC,gBAAgB,CAACT,WAAW,CAAC;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}