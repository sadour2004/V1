{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _NativeTiming = _interopRequireDefault(require(\"./NativeTiming\"));\nvar BatchedBridge = require('../../BatchedBridge/BatchedBridge').default;\nvar Systrace = require('../../Performance/Systrace');\nvar invariant = require('invariant');\nvar FRAME_DURATION = 1000 / 60;\nvar IDLE_CALLBACK_FRAME_DEADLINE = 1;\nvar callbacks = [];\nvar types = [];\nvar timerIDs = [];\nvar freeIdxs = [];\nvar reactNativeMicrotasks = [];\nvar requestIdleCallbacks = [];\nvar requestIdleCallbackTimeouts = {};\nvar GUID = 1;\nvar errors = [];\nvar hasEmittedTimeDriftWarning = false;\nfunction _getFreeIndex() {\n  var freeIdx = freeIdxs.pop();\n  if (freeIdx === undefined) {\n    return timerIDs.length;\n  }\n  return freeIdx;\n}\nfunction _allocateCallback(func, type) {\n  var id = GUID++;\n  var freeIndex = _getFreeIndex();\n  timerIDs[freeIndex] = id;\n  callbacks[freeIndex] = func;\n  types[freeIndex] = type;\n  return id;\n}\nfunction _callTimer(timerID, frameTime, didTimeout) {\n  if (timerID > GUID) {\n    console.warn('Tried to call timer with ID %s but no such timer exists.', timerID);\n  }\n  var timerIndex = timerIDs.indexOf(timerID);\n  if (timerIndex === -1) {\n    return;\n  }\n  var type = types[timerIndex];\n  var callback = callbacks[timerIndex];\n  if (!callback || !type) {\n    console.error('No callback found for timerID ' + timerID);\n    return;\n  }\n  if (__DEV__) {\n    Systrace.beginEvent(type + ' [invoke]');\n  }\n  if (type !== 'setInterval') {\n    _clearIndex(timerIndex);\n  }\n  try {\n    if (type === 'setTimeout' || type === 'setInterval' || type === 'queueReactNativeMicrotask') {\n      callback();\n    } else if (type === 'requestAnimationFrame') {\n      callback(global.performance.now());\n    } else if (type === 'requestIdleCallback') {\n      callback({\n        timeRemaining: function timeRemaining() {\n          return Math.max(0, FRAME_DURATION - (global.performance.now() - frameTime));\n        },\n        didTimeout: !!didTimeout\n      });\n    } else {\n      console.error('Tried to call a callback with invalid type: ' + type);\n    }\n  } catch (e) {\n    errors.push(e);\n  }\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n}\nfunction _callReactNativeMicrotasksPass() {\n  if (reactNativeMicrotasks.length === 0) {\n    return false;\n  }\n  if (__DEV__) {\n    Systrace.beginEvent('callReactNativeMicrotasksPass()');\n  }\n  var passReactNativeMicrotasks = reactNativeMicrotasks;\n  reactNativeMicrotasks = [];\n  for (var i = 0; i < passReactNativeMicrotasks.length; ++i) {\n    _callTimer(passReactNativeMicrotasks[i], 0);\n  }\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n  return reactNativeMicrotasks.length > 0;\n}\nfunction _clearIndex(i) {\n  timerIDs[i] = null;\n  callbacks[i] = null;\n  types[i] = null;\n  freeIdxs.push(i);\n}\nfunction _freeCallback(timerID) {\n  if (timerID == null) {\n    return;\n  }\n  var index = timerIDs.indexOf(timerID);\n  if (index !== -1) {\n    var type = types[index];\n    _clearIndex(index);\n    if (type !== 'queueReactNativeMicrotask' && type !== 'requestIdleCallback') {\n      deleteTimer(timerID);\n    }\n  }\n}\nvar JSTimers = {\n  setTimeout: function setTimeout(func, duration) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    var id = _allocateCallback(function () {\n      return func.apply(undefined, args);\n    }, 'setTimeout');\n    createTimer(id, duration || 0, Date.now(), false);\n    return id;\n  },\n  setInterval: function setInterval(func, duration) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    var id = _allocateCallback(function () {\n      return func.apply(undefined, args);\n    }, 'setInterval');\n    createTimer(id, duration || 0, Date.now(), true);\n    return id;\n  },\n  queueReactNativeMicrotask: function queueReactNativeMicrotask(func) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    var id = _allocateCallback(function () {\n      return func.apply(undefined, args);\n    }, 'queueReactNativeMicrotask');\n    reactNativeMicrotasks.push(id);\n    return id;\n  },\n  requestAnimationFrame: function requestAnimationFrame(func) {\n    var id = _allocateCallback(func, 'requestAnimationFrame');\n    createTimer(id, 1, Date.now(), false);\n    return id;\n  },\n  requestIdleCallback: function requestIdleCallback(func, options) {\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(true);\n    }\n    var timeout = options && options.timeout;\n    var id = _allocateCallback(timeout != null ? function (deadline) {\n      var timeoutId = requestIdleCallbackTimeouts[id];\n      if (timeoutId) {\n        JSTimers.clearTimeout(timeoutId);\n        delete requestIdleCallbackTimeouts[id];\n      }\n      return func(deadline);\n    } : func, 'requestIdleCallback');\n    requestIdleCallbacks.push(id);\n    if (timeout != null) {\n      var timeoutId = JSTimers.setTimeout(function () {\n        var index = requestIdleCallbacks.indexOf(id);\n        if (index > -1) {\n          requestIdleCallbacks.splice(index, 1);\n          _callTimer(id, global.performance.now(), true);\n        }\n        delete requestIdleCallbackTimeouts[id];\n        if (requestIdleCallbacks.length === 0) {\n          setSendIdleEvents(false);\n        }\n      }, timeout);\n      requestIdleCallbackTimeouts[id] = timeoutId;\n    }\n    return id;\n  },\n  cancelIdleCallback: function cancelIdleCallback(timerID) {\n    _freeCallback(timerID);\n    var index = requestIdleCallbacks.indexOf(timerID);\n    if (index !== -1) {\n      requestIdleCallbacks.splice(index, 1);\n    }\n    var timeoutId = requestIdleCallbackTimeouts[timerID];\n    if (timeoutId) {\n      JSTimers.clearTimeout(timeoutId);\n      delete requestIdleCallbackTimeouts[timerID];\n    }\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n  },\n  clearTimeout: function clearTimeout(timerID) {\n    _freeCallback(timerID);\n  },\n  clearInterval: function clearInterval(timerID) {\n    _freeCallback(timerID);\n  },\n  clearReactNativeMicrotask: function clearReactNativeMicrotask(timerID) {\n    _freeCallback(timerID);\n    var index = reactNativeMicrotasks.indexOf(timerID);\n    if (index !== -1) {\n      reactNativeMicrotasks.splice(index, 1);\n    }\n  },\n  cancelAnimationFrame: function cancelAnimationFrame(timerID) {\n    _freeCallback(timerID);\n  },\n  callTimers: function callTimers(timersToCall) {\n    invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');\n    errors.length = 0;\n    for (var i = 0; i < timersToCall.length; i++) {\n      _callTimer(timersToCall[i], 0);\n    }\n    var errorCount = errors.length;\n    if (errorCount > 0) {\n      if (errorCount > 1) {\n        for (var ii = 1; ii < errorCount; ii++) {\n          JSTimers.setTimeout(function (error) {\n            throw error;\n          }.bind(null, errors[ii]), 0);\n        }\n      }\n      throw errors[0];\n    }\n  },\n  callIdleCallbacks: function callIdleCallbacks(frameTime) {\n    if (FRAME_DURATION - (Date.now() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {\n      return;\n    }\n    errors.length = 0;\n    if (requestIdleCallbacks.length > 0) {\n      var passIdleCallbacks = requestIdleCallbacks;\n      requestIdleCallbacks = [];\n      for (var i = 0; i < passIdleCallbacks.length; ++i) {\n        _callTimer(passIdleCallbacks[i], frameTime);\n      }\n    }\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n    errors.forEach(function (error) {\n      return JSTimers.setTimeout(function () {\n        throw error;\n      }, 0);\n    });\n  },\n  callReactNativeMicrotasks: function callReactNativeMicrotasks() {\n    errors.length = 0;\n    while (_callReactNativeMicrotasksPass()) {}\n    errors.forEach(function (error) {\n      return JSTimers.setTimeout(function () {\n        throw error;\n      }, 0);\n    });\n  },\n  emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {\n    if (hasEmittedTimeDriftWarning) {\n      return;\n    }\n    hasEmittedTimeDriftWarning = true;\n    console.warn(warningMessage);\n  }\n};\nfunction createTimer(callbackID, duration, jsSchedulingTime, repeats) {\n  invariant(_NativeTiming.default, 'NativeTiming is available');\n  _NativeTiming.default.createTimer(callbackID, duration, jsSchedulingTime, repeats);\n}\nfunction deleteTimer(timerID) {\n  invariant(_NativeTiming.default, 'NativeTiming is available');\n  _NativeTiming.default.deleteTimer(timerID);\n}\nfunction setSendIdleEvents(sendIdleEvents) {\n  invariant(_NativeTiming.default, 'NativeTiming is available');\n  _NativeTiming.default.setSendIdleEvents(sendIdleEvents);\n}\nvar ExportedJSTimers;\nif (!_NativeTiming.default) {\n  console.warn(\"Timing native module is not available, can't set timers.\");\n  ExportedJSTimers = {\n    callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,\n    queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask\n  };\n} else {\n  ExportedJSTimers = JSTimers;\n}\nBatchedBridge.setReactNativeMicrotasksCallback(JSTimers.callReactNativeMicrotasks);\nvar _default = exports.default = ExportedJSTimers;","map":{"version":3,"names":["_NativeTiming","_interopRequireDefault","require","BatchedBridge","default","Systrace","invariant","FRAME_DURATION","IDLE_CALLBACK_FRAME_DEADLINE","callbacks","types","timerIDs","freeIdxs","reactNativeMicrotasks","requestIdleCallbacks","requestIdleCallbackTimeouts","GUID","errors","hasEmittedTimeDriftWarning","_getFreeIndex","freeIdx","pop","undefined","length","_allocateCallback","func","type","id","freeIndex","_callTimer","timerID","frameTime","didTimeout","console","warn","timerIndex","indexOf","callback","error","__DEV__","beginEvent","_clearIndex","global","performance","now","timeRemaining","Math","max","e","push","endEvent","_callReactNativeMicrotasksPass","passReactNativeMicrotasks","i","_freeCallback","index","deleteTimer","JSTimers","setTimeout","duration","_len","arguments","args","Array","_key","apply","createTimer","Date","setInterval","_len2","_key2","queueReactNativeMicrotask","_len3","_key3","requestAnimationFrame","requestIdleCallback","options","setSendIdleEvents","timeout","deadline","timeoutId","clearTimeout","splice","cancelIdleCallback","clearInterval","clearReactNativeMicrotask","cancelAnimationFrame","callTimers","timersToCall","errorCount","ii","bind","callIdleCallbacks","passIdleCallbacks","forEach","callReactNativeMicrotasks","emitTimeDriftWarning","warningMessage","callbackID","jsSchedulingTime","repeats","NativeTiming","sendIdleEvents","ExportedJSTimers","setReactNativeMicrotasksCallback","_default","exports"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Core/Timers/JSTimers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport NativeTiming from './NativeTiming';\n\nconst BatchedBridge = require('../../BatchedBridge/BatchedBridge').default;\nconst Systrace = require('../../Performance/Systrace');\nconst invariant = require('invariant');\n\n/**\n * JS implementation of timer functions. Must be completely driven by an\n * external clock signal, all that's stored here is timerID, timer type, and\n * callback.\n */\n\nexport type JSTimerType =\n  | 'setTimeout'\n  | 'setInterval'\n  | 'requestAnimationFrame'\n  | 'queueReactNativeMicrotask'\n  | 'requestIdleCallback';\n\n// These timing constants should be kept in sync with the ones in native ios and\n// android `RCTTiming` module.\nconst FRAME_DURATION = 1000 / 60;\nconst IDLE_CALLBACK_FRAME_DEADLINE = 1;\n\n// Parallel arrays\nconst callbacks: Array<?Function> = [];\nconst types: Array<?JSTimerType> = [];\nconst timerIDs: Array<?number> = [];\nconst freeIdxs: Array<number> = [];\nlet reactNativeMicrotasks: Array<number> = [];\nlet requestIdleCallbacks: Array<number> = [];\nconst requestIdleCallbackTimeouts: {[number]: number, ...} = {};\n\nlet GUID = 1;\nconst errors: Array<Error> = [];\n\nlet hasEmittedTimeDriftWarning = false;\n\n// Returns a free index if one is available, and the next consecutive index otherwise.\nfunction _getFreeIndex(): number {\n  const freeIdx = freeIdxs.pop();\n  if (freeIdx === undefined) {\n    return timerIDs.length;\n  }\n  return freeIdx;\n}\n\nfunction _allocateCallback(func: Function, type: JSTimerType): number {\n  const id = GUID++;\n  const freeIndex = _getFreeIndex();\n  timerIDs[freeIndex] = id;\n  callbacks[freeIndex] = func;\n  types[freeIndex] = type;\n  return id;\n}\n\n/**\n * Calls the callback associated with the ID. Also unregister that callback\n * if it was a one time timer (setTimeout), and not unregister it if it was\n * recurring (setInterval).\n */\nfunction _callTimer(timerID: number, frameTime: number, didTimeout: ?boolean) {\n  if (timerID > GUID) {\n    console.warn(\n      'Tried to call timer with ID %s but no such timer exists.',\n      timerID,\n    );\n  }\n\n  // timerIndex of -1 means that no timer with that ID exists. There are\n  // two situations when this happens, when a garbage timer ID was given\n  // and when a previously existing timer was deleted before this callback\n  // fired. In both cases we want to ignore the timer id, but in the former\n  // case we warn as well.\n  const timerIndex = timerIDs.indexOf(timerID);\n  if (timerIndex === -1) {\n    return;\n  }\n\n  const type = types[timerIndex];\n  const callback = callbacks[timerIndex];\n  if (!callback || !type) {\n    console.error('No callback found for timerID ' + timerID);\n    return;\n  }\n\n  if (__DEV__) {\n    Systrace.beginEvent(type + ' [invoke]');\n  }\n\n  // Clear the metadata\n  if (type !== 'setInterval') {\n    _clearIndex(timerIndex);\n  }\n\n  try {\n    if (\n      type === 'setTimeout' ||\n      type === 'setInterval' ||\n      type === 'queueReactNativeMicrotask'\n    ) {\n      callback();\n    } else if (type === 'requestAnimationFrame') {\n      callback(global.performance.now());\n    } else if (type === 'requestIdleCallback') {\n      callback({\n        timeRemaining: function () {\n          // TODO: Optimisation: allow running for longer than one frame if\n          // there are no pending JS calls on the bridge from native. This\n          // would require a way to check the bridge queue synchronously.\n          return Math.max(\n            0,\n            FRAME_DURATION - (global.performance.now() - frameTime),\n          );\n        },\n        didTimeout: !!didTimeout,\n      });\n    } else {\n      console.error('Tried to call a callback with invalid type: ' + type);\n    }\n  } catch (e) {\n    // Don't rethrow so that we can run all timers.\n    errors.push(e);\n  }\n\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n}\n\n/**\n * Performs a single pass over the enqueued reactNativeMicrotasks. Returns whether\n * more reactNativeMicrotasks are queued up (can be used as a condition a while loop).\n */\nfunction _callReactNativeMicrotasksPass() {\n  if (reactNativeMicrotasks.length === 0) {\n    return false;\n  }\n\n  if (__DEV__) {\n    Systrace.beginEvent('callReactNativeMicrotasksPass()');\n  }\n\n  // The main reason to extract a single pass is so that we can track\n  // in the system trace\n  const passReactNativeMicrotasks = reactNativeMicrotasks;\n  reactNativeMicrotasks = [];\n\n  // Use for loop rather than forEach as per @vjeux's advice\n  // https://github.com/facebook/react-native/commit/c8fd9f7588ad02d2293cac7224715f4af7b0f352#commitcomment-14570051\n  for (let i = 0; i < passReactNativeMicrotasks.length; ++i) {\n    _callTimer(passReactNativeMicrotasks[i], 0);\n  }\n\n  if (__DEV__) {\n    Systrace.endEvent();\n  }\n  return reactNativeMicrotasks.length > 0;\n}\n\nfunction _clearIndex(i: number) {\n  timerIDs[i] = null;\n  callbacks[i] = null;\n  types[i] = null;\n  freeIdxs.push(i);\n}\n\nfunction _freeCallback(timerID: number) {\n  // timerIDs contains nulls after timers have been removed;\n  // ignore nulls upfront so indexOf doesn't find them\n  if (timerID == null) {\n    return;\n  }\n\n  const index = timerIDs.indexOf(timerID);\n  // See corresponding comment in `callTimers` for reasoning behind this\n  if (index !== -1) {\n    const type = types[index];\n    _clearIndex(index);\n    if (\n      type !== 'queueReactNativeMicrotask' &&\n      type !== 'requestIdleCallback'\n    ) {\n      deleteTimer(timerID);\n    }\n  }\n}\n\n/**\n * JS implementation of timer functions. Must be completely driven by an\n * external clock signal, all that's stored here is timerID, timer type, and\n * callback.\n */\nconst JSTimers = {\n  /**\n   * @param {function} func Callback to be invoked after `duration` ms.\n   * @param {number} duration Number of milliseconds.\n   */\n  setTimeout: function (\n    func: Function,\n    duration: number,\n    ...args: any\n  ): number {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setTimeout',\n    );\n    createTimer(id, duration || 0, Date.now(), /* recurring */ false);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every `duration` ms.\n   * @param {number} duration Number of milliseconds.\n   */\n  setInterval: function (\n    func: Function,\n    duration: number,\n    ...args: any\n  ): number {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'setInterval',\n    );\n    createTimer(id, duration || 0, Date.now(), /* recurring */ true);\n    return id;\n  },\n\n  /**\n   * The React Native microtask mechanism is used to back public APIs e.g.\n   * `queueMicrotask`, `clearImmediate`, and `setImmediate` (which is used by\n   * the Promise polyfill) when the JSVM microtask mechanism is not used.\n   *\n   * @param {function} func Callback to be invoked before the end of the\n   * current JavaScript execution loop.\n   */\n  queueReactNativeMicrotask: function (func: Function, ...args: any): number {\n    const id = _allocateCallback(\n      () => func.apply(undefined, args),\n      'queueReactNativeMicrotask',\n    );\n    reactNativeMicrotasks.push(id);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every frame.\n   */\n  requestAnimationFrame: function (func: Function): any | number {\n    const id = _allocateCallback(func, 'requestAnimationFrame');\n    createTimer(id, 1, Date.now(), /* recurring */ false);\n    return id;\n  },\n\n  /**\n   * @param {function} func Callback to be invoked every frame and provided\n   * with time remaining in frame.\n   * @param {?object} options\n   */\n  requestIdleCallback: function (\n    func: Function,\n    options: ?Object,\n  ): any | number {\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(true);\n    }\n\n    const timeout = options && options.timeout;\n    const id: number = _allocateCallback(\n      timeout != null\n        ? (deadline: any) => {\n            const timeoutId: number = requestIdleCallbackTimeouts[id];\n            if (timeoutId) {\n              JSTimers.clearTimeout(timeoutId);\n              delete requestIdleCallbackTimeouts[id];\n            }\n            return func(deadline);\n          }\n        : func,\n      'requestIdleCallback',\n    );\n    requestIdleCallbacks.push(id);\n\n    if (timeout != null) {\n      const timeoutId: number = JSTimers.setTimeout(() => {\n        const index: number = requestIdleCallbacks.indexOf(id);\n        if (index > -1) {\n          requestIdleCallbacks.splice(index, 1);\n          _callTimer(id, global.performance.now(), true);\n        }\n        delete requestIdleCallbackTimeouts[id];\n        if (requestIdleCallbacks.length === 0) {\n          setSendIdleEvents(false);\n        }\n      }, timeout);\n      requestIdleCallbackTimeouts[id] = timeoutId;\n    }\n    return id;\n  },\n\n  cancelIdleCallback: function (timerID: number) {\n    _freeCallback(timerID);\n    const index = requestIdleCallbacks.indexOf(timerID);\n    if (index !== -1) {\n      requestIdleCallbacks.splice(index, 1);\n    }\n\n    const timeoutId = requestIdleCallbackTimeouts[timerID];\n    if (timeoutId) {\n      JSTimers.clearTimeout(timeoutId);\n      delete requestIdleCallbackTimeouts[timerID];\n    }\n\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n  },\n\n  clearTimeout: function (timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  clearInterval: function (timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  clearReactNativeMicrotask: function (timerID: number) {\n    _freeCallback(timerID);\n    const index = reactNativeMicrotasks.indexOf(timerID);\n    if (index !== -1) {\n      reactNativeMicrotasks.splice(index, 1);\n    }\n  },\n\n  cancelAnimationFrame: function (timerID: number) {\n    _freeCallback(timerID);\n  },\n\n  /**\n   * This is called from the native side. We are passed an array of timerIDs,\n   * and\n   */\n  callTimers: function (timersToCall: Array<number>): any | void {\n    invariant(\n      timersToCall.length !== 0,\n      'Cannot call `callTimers` with an empty list of IDs.',\n    );\n\n    errors.length = 0;\n    for (let i = 0; i < timersToCall.length; i++) {\n      _callTimer(timersToCall[i], 0);\n    }\n\n    const errorCount = errors.length;\n    if (errorCount > 0) {\n      if (errorCount > 1) {\n        // Throw all the other errors in a setTimeout, which will throw each\n        // error one at a time\n        for (let ii = 1; ii < errorCount; ii++) {\n          JSTimers.setTimeout(\n            ((error: Error) => {\n              throw error;\n            }).bind(null, errors[ii]),\n            0,\n          );\n        }\n      }\n      throw errors[0];\n    }\n  },\n\n  callIdleCallbacks: function (frameTime: number) {\n    if (\n      FRAME_DURATION - (Date.now() - frameTime) <\n      IDLE_CALLBACK_FRAME_DEADLINE\n    ) {\n      return;\n    }\n\n    errors.length = 0;\n    if (requestIdleCallbacks.length > 0) {\n      const passIdleCallbacks = requestIdleCallbacks;\n      requestIdleCallbacks = [];\n\n      for (let i = 0; i < passIdleCallbacks.length; ++i) {\n        _callTimer(passIdleCallbacks[i], frameTime);\n      }\n    }\n\n    if (requestIdleCallbacks.length === 0) {\n      setSendIdleEvents(false);\n    }\n\n    errors.forEach(error =>\n      JSTimers.setTimeout(() => {\n        throw error;\n      }, 0),\n    );\n  },\n\n  /**\n   * This is called after we execute any command we receive from native but\n   * before we hand control back to native.\n   */\n  callReactNativeMicrotasks() {\n    errors.length = 0;\n    while (_callReactNativeMicrotasksPass()) {}\n    errors.forEach(error =>\n      JSTimers.setTimeout(() => {\n        throw error;\n      }, 0),\n    );\n  },\n\n  /**\n   * Called from native (in development) when environment times are out-of-sync.\n   */\n  emitTimeDriftWarning(warningMessage: string) {\n    if (hasEmittedTimeDriftWarning) {\n      return;\n    }\n    hasEmittedTimeDriftWarning = true;\n    console.warn(warningMessage);\n  },\n};\n\nfunction createTimer(\n  callbackID: number,\n  duration: number,\n  jsSchedulingTime: number,\n  repeats: boolean,\n): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.createTimer(callbackID, duration, jsSchedulingTime, repeats);\n}\n\nfunction deleteTimer(timerID: number): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.deleteTimer(timerID);\n}\n\nfunction setSendIdleEvents(sendIdleEvents: boolean): void {\n  invariant(NativeTiming, 'NativeTiming is available');\n  NativeTiming.setSendIdleEvents(sendIdleEvents);\n}\n\nlet ExportedJSTimers: {\n  callIdleCallbacks: (frameTime: number) => any | void,\n  callReactNativeMicrotasks: () => void,\n  callTimers: (timersToCall: Array<number>) => any | void,\n  cancelAnimationFrame: (timerID: number) => void,\n  cancelIdleCallback: (timerID: number) => void,\n  clearReactNativeMicrotask: (timerID: number) => void,\n  clearInterval: (timerID: number) => void,\n  clearTimeout: (timerID: number) => void,\n  emitTimeDriftWarning: (warningMessage: string) => any | void,\n  requestAnimationFrame: (func: any) => any | number,\n  requestIdleCallback: (func: any, options: ?any) => any | number,\n  queueReactNativeMicrotask: (func: any, ...args: any) => number,\n  setInterval: (func: any, duration: number, ...args: any) => number,\n  setTimeout: (func: any, duration: number, ...args: any) => number,\n};\n\nif (!NativeTiming) {\n  console.warn(\"Timing native module is not available, can't set timers.\");\n  // $FlowFixMe[prop-missing] : we can assume timers are generally available\n  ExportedJSTimers = ({\n    callReactNativeMicrotasks: JSTimers.callReactNativeMicrotasks,\n    queueReactNativeMicrotask: JSTimers.queueReactNativeMicrotask,\n  }: typeof JSTimers);\n} else {\n  ExportedJSTimers = JSTimers;\n}\n\nBatchedBridge.setReactNativeMicrotasksCallback(\n  JSTimers.callReactNativeMicrotasks,\n);\n\nexport default ExportedJSTimers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}