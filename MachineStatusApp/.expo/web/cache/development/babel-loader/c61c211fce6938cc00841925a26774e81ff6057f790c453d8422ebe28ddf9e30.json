{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.get = get;\nexports.getWithFallback_DEPRECATED = getWithFallback_DEPRECATED;\nexports.setRuntimeConfigProvider = setRuntimeConfigProvider;\nexports.unstable_hasStaticViewConfig = unstable_hasStaticViewConfig;\nvar _getNativeComponentAttributes = _interopRequireDefault(require(\"../ReactNative/getNativeComponentAttributes\"));\nvar _UIManager = _interopRequireDefault(require(\"../ReactNative/UIManager\"));\nvar ReactNativeViewConfigRegistry = _interopRequireWildcard(require(\"../Renderer/shims/ReactNativeViewConfigRegistry\"));\nvar StaticViewConfigValidator = _interopRequireWildcard(require(\"./StaticViewConfigValidator\"));\nvar _ViewConfig = require(\"./ViewConfig\");\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar getRuntimeConfig;\nfunction setRuntimeConfigProvider(runtimeConfigProvider) {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\nfunction get(name, viewConfigProvider) {\n  ReactNativeViewConfigRegistry.register(name, function () {\n    var _getRuntimeConfig;\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n        native: !global.RN$Bridgeless,\n        verify: false\n      },\n      native = _ref.native,\n      verify = _ref.verify;\n    var viewConfig;\n    if (native) {\n      var _getNativeComponentAt;\n      viewConfig = (_getNativeComponentAt = (0, _getNativeComponentAttributes.default)(name)) != null ? _getNativeComponentAt : (0, _ViewConfig.createViewConfig)(viewConfigProvider());\n    } else {\n      var _createViewConfig;\n      viewConfig = (_createViewConfig = (0, _ViewConfig.createViewConfig)(viewConfigProvider())) != null ? _createViewConfig : (0, _getNativeComponentAttributes.default)(name);\n    }\n    (0, _invariant.default)(viewConfig != null, 'NativeComponentRegistry.get: both static and native view config are missing for native component \"%s\".', name);\n    if (verify) {\n      var nativeViewConfig = native ? viewConfig : (0, _getNativeComponentAttributes.default)(name);\n      if (nativeViewConfig == null) {\n        return viewConfig;\n      }\n      var staticViewConfig = native ? (0, _ViewConfig.createViewConfig)(viewConfigProvider()) : viewConfig;\n      var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n      if (validationOutput.type === 'invalid') {\n        console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n      }\n    }\n    return viewConfig;\n  });\n  return name;\n}\nfunction getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\nfunction hasNativeViewConfig(name) {\n  (0, _invariant.default)(getRuntimeConfig == null, 'Unexpected invocation!');\n  return _UIManager.default.getViewManagerConfig(name) != null;\n}\nfunction unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n      native: true\n    },\n    native = _ref2.native;\n  return !native;\n}","map":{"version":3,"names":["_getNativeComponentAttributes","_interopRequireDefault","require","_UIManager","ReactNativeViewConfigRegistry","_interopRequireWildcard","StaticViewConfigValidator","_ViewConfig","_invariant","React","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","getRuntimeConfig","setRuntimeConfigProvider","runtimeConfigProvider","undefined","name","viewConfigProvider","register","_getRuntimeConfig","_ref","native","global","RN$Bridgeless","verify","viewConfig","_getNativeComponentAt","getNativeComponentAttributes","createViewConfig","_createViewConfig","invariant","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","UIManager","getViewManagerConfig","unstable_hasStaticViewConfig","_getRuntimeConfig2","_ref2"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {HostComponent} from '../../src/private/types/HostComponent';\nimport type {\n  PartialViewConfig,\n  ViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport * as ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    verify: boolean,\n  },\n): void {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config: {...}>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, verify} = getRuntimeConfig?.(name) ?? {\n      native: !global.RN$Bridgeless,\n      verify: false,\n    };\n\n    let viewConfig: ViewConfig;\n    if (native) {\n      viewConfig =\n        getNativeComponentAttributes(name) ??\n        createViewConfig(viewConfigProvider());\n    } else {\n      viewConfig =\n        createViewConfig(viewConfigProvider()) ??\n        getNativeComponentAttributes(name);\n    }\n\n    invariant(\n      viewConfig != null,\n      'NativeComponentRegistry.get: both static and native view config are missing for native component \"%s\".',\n      name,\n    );\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n\n      if (nativeViewConfig == null) {\n        // Defer to static view config if native view config is missing.\n        return viewConfig;\n      }\n\n      const staticViewConfig: ViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      const validationOutput = StaticViewConfigValidator.validate(\n        name,\n        nativeViewConfig,\n        staticViewConfig,\n      );\n\n      if (validationOutput.type === 'invalid') {\n        console.error(\n          StaticViewConfigValidator.stringifyValidationResult(\n            name,\n            validationOutput,\n          ),\n        );\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config: {...}>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.ComponentType<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n"],"mappings":";;;;;;;;AAgBA,IAAAA,6BAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,UAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,6BAAA,GAAAC,uBAAA,CAAAH,OAAA;AACA,IAAAI,yBAAA,GAAAD,uBAAA,CAAAH,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AACA,IAAAM,UAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,KAAA,GAAAJ,uBAAA,CAAAH,OAAA;AAA+B,SAAAG,wBAAAK,CAAA,EAAAC,CAAA,6BAAAC,OAAA,MAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAP,uBAAA,YAAAA,wBAAAK,CAAA,EAAAC,CAAA,SAAAA,CAAA,IAAAD,CAAA,IAAAA,CAAA,CAAAK,UAAA,SAAAL,CAAA,MAAAM,CAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAC,SAAA,QAAAC,OAAA,EAAAV,CAAA,iBAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,SAAAQ,CAAA,MAAAF,CAAA,GAAAL,CAAA,GAAAG,CAAA,GAAAD,CAAA,QAAAG,CAAA,CAAAK,GAAA,CAAAX,CAAA,UAAAM,CAAA,CAAAM,GAAA,CAAAZ,CAAA,GAAAM,CAAA,CAAAO,GAAA,CAAAb,CAAA,EAAAQ,CAAA,cAAAM,EAAA,IAAAd,CAAA,gBAAAc,EAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,EAAA,OAAAP,CAAA,IAAAD,CAAA,GAAAW,MAAA,CAAAC,cAAA,KAAAD,MAAA,CAAAE,wBAAA,CAAAnB,CAAA,EAAAc,EAAA,OAAAP,CAAA,CAAAK,GAAA,IAAAL,CAAA,CAAAM,GAAA,IAAAP,CAAA,CAAAE,CAAA,EAAAM,EAAA,EAAAP,CAAA,IAAAC,CAAA,CAAAM,EAAA,IAAAd,CAAA,CAAAc,EAAA,WAAAN,CAAA,KAAAR,CAAA,EAAAC,CAAA;AAE/B,IAAImB,gBAAgB;AASb,SAASC,wBAAwBA,CACtCC,qBAGC,EACK;EACN,IAAIF,gBAAgB,KAAKG,SAAS,EAAE;IAClCH,gBAAgB,GAAGE,qBAAqB;EAC1C;AACF;AAQO,SAASV,GAAGA,CACjBY,IAAY,EACZC,kBAA2C,EACpB;EACvB/B,6BAA6B,CAACgC,QAAQ,CAACF,IAAI,EAAE,YAAM;IAAA,IAAAG,iBAAA;IACjD,IAAAC,IAAA,IAAAD,iBAAA,GAAyBP,gBAAgB,oBAAhBA,gBAAgB,CAAGI,IAAI,CAAC,YAAAG,iBAAA,GAAI;QACnDE,MAAM,EAAE,CAACC,MAAM,CAACC,aAAa;QAC7BC,MAAM,EAAE;MACV,CAAC;MAHMH,MAAM,GAAAD,IAAA,CAANC,MAAM;MAAEG,MAAM,GAAAJ,IAAA,CAANI,MAAM;IAKrB,IAAIC,UAAsB;IAC1B,IAAIJ,MAAM,EAAE;MAAA,IAAAK,qBAAA;MACVD,UAAU,IAAAC,qBAAA,GACR,IAAAC,qCAA4B,EAACX,IAAI,CAAC,YAAAU,qBAAA,GAClC,IAAAE,4BAAgB,EAACX,kBAAkB,CAAC,CAAC,CAAC;IAC1C,CAAC,MAAM;MAAA,IAAAY,iBAAA;MACLJ,UAAU,IAAAI,iBAAA,GACR,IAAAD,4BAAgB,EAACX,kBAAkB,CAAC,CAAC,CAAC,YAAAY,iBAAA,GACtC,IAAAF,qCAA4B,EAACX,IAAI,CAAC;IACtC;IAEA,IAAAc,kBAAS,EACPL,UAAU,IAAI,IAAI,EAClB,wGAAwG,EACxGT,IACF,CAAC;IAED,IAAIQ,MAAM,EAAE;MACV,IAAMO,gBAAgB,GAAGV,MAAM,GAC3BI,UAAU,GACV,IAAAE,qCAA4B,EAACX,IAAI,CAAC;MAEtC,IAAIe,gBAAgB,IAAI,IAAI,EAAE;QAE5B,OAAON,UAAU;MACnB;MAEA,IAAMO,gBAA4B,GAAGX,MAAM,GACvC,IAAAO,4BAAgB,EAACX,kBAAkB,CAAC,CAAC,CAAC,GACtCQ,UAAU;MAEd,IAAMQ,gBAAgB,GAAG7C,yBAAyB,CAAC8C,QAAQ,CACzDlB,IAAI,EACJe,gBAAgB,EAChBC,gBACF,CAAC;MAED,IAAIC,gBAAgB,CAACE,IAAI,KAAK,SAAS,EAAE;QACvCC,OAAO,CAACC,KAAK,CACXjD,yBAAyB,CAACkD,yBAAyB,CACjDtB,IAAI,EACJiB,gBACF,CACF,CAAC;MACH;IACF;IAEA,OAAOR,UAAU;EACnB,CAAC,CAAC;EAGF,OAAOT,IAAI;AACb;AAWO,SAASuB,0BAA0BA,CACxCvB,IAAY,EACZC,kBAA2C,EACd;EAC7B,IAAIL,gBAAgB,IAAI,IAAI,EAAE;IAG5B,IAAI4B,mBAAmB,CAACxB,IAAI,CAAC,EAAE;MAC7B,OAAOZ,GAAG,CAASY,IAAI,EAAEC,kBAAkB,CAAC;IAC9C;EACF,CAAC,MAAM;IAEL,IAAIL,gBAAgB,CAACI,IAAI,CAAC,IAAI,IAAI,EAAE;MAClC,OAAOZ,GAAG,CAASY,IAAI,EAAEC,kBAAkB,CAAC;IAC9C;EACF;EAEA,IAAMwB,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAaC,KAAa,EAAc;IACnE,OAAO,IAAI;EACb,CAAC;EACDD,uBAAuB,CAACE,WAAW,GAAG,YAAY3B,IAAI,GAAG;EACzD,OAAOyB,uBAAuB;AAChC;AAEA,SAASD,mBAAmBA,CAACxB,IAAY,EAAW;EAClD,IAAAc,kBAAS,EAAClB,gBAAgB,IAAI,IAAI,EAAE,wBAAwB,CAAC;EAC7D,OAAOgC,kBAAS,CAACC,oBAAoB,CAAC7B,IAAI,CAAC,IAAI,IAAI;AACrD;AAQO,SAAS8B,4BAA4BA,CAAC9B,IAAY,EAAW;EAAA,IAAA+B,kBAAA;EAClE,IAAAC,KAAA,IAAAD,kBAAA,GAAiBnC,gBAAgB,oBAAhBA,gBAAgB,CAAGI,IAAI,CAAC,YAAA+B,kBAAA,GAAI;MAC3C1B,MAAM,EAAE;IACV,CAAC;IAFMA,MAAM,GAAA2B,KAAA,CAAN3B,MAAM;EAGb,OAAO,CAACA,MAAM;AAChB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}