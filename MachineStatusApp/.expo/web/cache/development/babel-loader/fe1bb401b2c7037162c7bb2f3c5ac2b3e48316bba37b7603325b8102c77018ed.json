{"ast":null,"code":"'use strict';\n\nvar _require = require('../Utilities/PolyfillFunctions'),\n  polyfillGlobal = _require.polyfillGlobal;\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\nif (global.RN$Bridgeless === true) {\n  global.RN$enableMicrotasksInReact = true;\n  polyfillGlobal('queueMicrotask', function () {\n    return require('../../src/private/webapis/microtasks/specs/NativeMicrotasks').default.queueMicrotask;\n  });\n  polyfillGlobal('setImmediate', function () {\n    return require('./Timers/immediateShim').setImmediate;\n  });\n  polyfillGlobal('clearImmediate', function () {\n    return require('./Timers/immediateShim').clearImmediate;\n  });\n  polyfillGlobal('requestIdleCallback', function () {\n    return require('../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks').default.requestIdleCallback;\n  });\n  polyfillGlobal('cancelIdleCallback', function () {\n    return require('../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks').default.cancelIdleCallback;\n  });\n} else {\n  var defineLazyTimer = function defineLazyTimer(name) {\n    polyfillGlobal(name, function () {\n      return require('./Timers/JSTimers').default[name];\n    });\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n  polyfillGlobal('queueMicrotask', function () {\n    return require('./Timers/queueMicrotask.js').default;\n  });\n  polyfillGlobal('setImmediate', function () {\n    return require('./Timers/JSTimers').default.queueReactNativeMicrotask;\n  });\n  polyfillGlobal('clearImmediate', function () {\n    return require('./Timers/JSTimers').default.clearReactNativeMicrotask;\n  });\n}","map":{"version":3,"names":["_require","require","polyfillGlobal","__DEV__","global","Promise","console","error","RN$Bridgeless","RN$enableMicrotasksInReact","default","queueMicrotask","setImmediate","clearImmediate","requestIdleCallback","cancelIdleCallback","defineLazyTimer","name","queueReactNativeMicrotask","clearReactNativeMicrotask"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/Libraries/Core/setUpTimers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\n\n// In bridgeless mode, timers are host functions installed from cpp.\nif (global.RN$Bridgeless === true) {\n  // This is the flag that tells React to use `queueMicrotask` to batch state\n  // updates, instead of using the scheduler to schedule a regular task.\n  // We use a global variable because we don't currently have any other\n  // mechanism to pass feature flags from RN to React in OSS.\n  global.RN$enableMicrotasksInReact = true;\n\n  polyfillGlobal(\n    'queueMicrotask',\n    () =>\n      require('../../src/private/webapis/microtasks/specs/NativeMicrotasks')\n        .default.queueMicrotask,\n  );\n\n  // We shim the immediate APIs via `queueMicrotask` to maintain the backward\n  // compatibility.\n  polyfillGlobal(\n    'setImmediate',\n    () => require('./Timers/immediateShim').setImmediate,\n  );\n  polyfillGlobal(\n    'clearImmediate',\n    () => require('./Timers/immediateShim').clearImmediate,\n  );\n\n  polyfillGlobal(\n    'requestIdleCallback',\n    () =>\n      require('../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks')\n        .default.requestIdleCallback,\n  );\n\n  polyfillGlobal(\n    'cancelIdleCallback',\n    () =>\n      require('../../src/private/webapis/idlecallbacks/specs/NativeIdleCallbacks')\n        .default.cancelIdleCallback,\n  );\n} else {\n  /**\n   * Set up timers.\n   * You can use this module directly, or just require InitializeCore.\n   */\n  const defineLazyTimer = (\n    name:\n      | 'cancelAnimationFrame'\n      | 'cancelIdleCallback'\n      | 'clearInterval'\n      | 'clearTimeout'\n      | 'requestAnimationFrame'\n      | 'requestIdleCallback'\n      | 'setInterval'\n      | 'setTimeout',\n  ) => {\n    polyfillGlobal(name, () => require('./Timers/JSTimers').default[name]);\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n\n  // Polyfill it with promise (regardless it's polyfilled or native) otherwise.\n  polyfillGlobal(\n    'queueMicrotask',\n    () => require('./Timers/queueMicrotask.js').default,\n  );\n\n  // When promise was polyfilled hence is queued to the RN microtask queue,\n  // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.\n  // Note that in bridgeless mode, immediate APIs are installed from cpp.\n  polyfillGlobal(\n    'setImmediate',\n    () => require('./Timers/JSTimers').default.queueReactNativeMicrotask,\n  );\n  polyfillGlobal(\n    'clearImmediate',\n    () => require('./Timers/JSTimers').default.clearReactNativeMicrotask,\n  );\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAAA,QAAA,GAAyBC,OAAO,CAAC,gCAAgC,CAAC;EAA3DC,cAAc,GAAAF,QAAA,CAAdE,cAAc;AAErB,IAAIC,OAAO,EAAE;EACX,IAAI,OAAOC,MAAM,CAACC,OAAO,KAAK,UAAU,EAAE;IACxCC,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;EACjE;AACF;AAGA,IAAIH,MAAM,CAACI,aAAa,KAAK,IAAI,EAAE;EAKjCJ,MAAM,CAACK,0BAA0B,GAAG,IAAI;EAExCP,cAAc,CACZ,gBAAgB,EAChB;IAAA,OACED,OAAO,CAAC,6DAA6D,CAAC,CACnES,OAAO,CAACC,cAAc;EAAA,CAC7B,CAAC;EAIDT,cAAc,CACZ,cAAc,EACd;IAAA,OAAMD,OAAO,CAAC,wBAAwB,CAAC,CAACW,YAAY;EAAA,CACtD,CAAC;EACDV,cAAc,CACZ,gBAAgB,EAChB;IAAA,OAAMD,OAAO,CAAC,wBAAwB,CAAC,CAACY,cAAc;EAAA,CACxD,CAAC;EAEDX,cAAc,CACZ,qBAAqB,EACrB;IAAA,OACED,OAAO,CAAC,mEAAmE,CAAC,CACzES,OAAO,CAACI,mBAAmB;EAAA,CAClC,CAAC;EAEDZ,cAAc,CACZ,oBAAoB,EACpB;IAAA,OACED,OAAO,CAAC,mEAAmE,CAAC,CACzES,OAAO,CAACK,kBAAkB;EAAA,CACjC,CAAC;AACH,CAAC,MAAM;EAKL,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CACnBC,IAQgB,EACb;IACHf,cAAc,CAACe,IAAI,EAAE;MAAA,OAAMhB,OAAO,CAAC,mBAAmB,CAAC,CAACS,OAAO,CAACO,IAAI,CAAC;IAAA,EAAC;EACxE,CAAC;EACDD,eAAe,CAAC,YAAY,CAAC;EAC7BA,eAAe,CAAC,cAAc,CAAC;EAC/BA,eAAe,CAAC,aAAa,CAAC;EAC9BA,eAAe,CAAC,eAAe,CAAC;EAChCA,eAAe,CAAC,uBAAuB,CAAC;EACxCA,eAAe,CAAC,sBAAsB,CAAC;EACvCA,eAAe,CAAC,qBAAqB,CAAC;EACtCA,eAAe,CAAC,oBAAoB,CAAC;EAGrCd,cAAc,CACZ,gBAAgB,EAChB;IAAA,OAAMD,OAAO,CAAC,4BAA4B,CAAC,CAACS,OAAO;EAAA,CACrD,CAAC;EAKDR,cAAc,CACZ,cAAc,EACd;IAAA,OAAMD,OAAO,CAAC,mBAAmB,CAAC,CAACS,OAAO,CAACQ,yBAAyB;EAAA,CACtE,CAAC;EACDhB,cAAc,CACZ,gBAAgB,EAChB;IAAA,OAAMD,OAAO,CAAC,mBAAmB,CAAC,CAACS,OAAO,CAACS,yBAAyB;EAAA,CACtE,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}