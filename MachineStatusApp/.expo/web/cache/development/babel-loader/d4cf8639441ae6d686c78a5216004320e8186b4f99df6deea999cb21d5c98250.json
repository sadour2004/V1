{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar TurboModuleRegistry = _interopRequireWildcard(require(\"../../../../../../Libraries/TurboModule/TurboModuleRegistry\"));\nvar _nullthrows = _interopRequireDefault(require(\"nullthrows\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nvar RawNativeDOM = TurboModuleRegistry.get('NativeDOMCxx');\nvar NativeDOM = {\n  compareDocumentPosition: function compareDocumentPosition(nativeNodeReference, otherNativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).compareDocumentPosition(nativeNodeReference, otherNativeNodeReference);\n  },\n  getChildNodes: function getChildNodes(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getChildNodes(nativeNodeReference);\n  },\n  getParentNode: function getParentNode(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getParentNode(nativeNodeReference);\n  },\n  isConnected: function isConnected(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).isConnected(nativeNodeReference);\n  },\n  getBorderWidth: function getBorderWidth(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getBorderWidth(nativeNodeReference);\n  },\n  getBoundingClientRect: function getBoundingClientRect(nativeNodeReference, includeTransform) {\n    return (0, _nullthrows.default)(RawNativeDOM).getBoundingClientRect(nativeNodeReference, includeTransform);\n  },\n  getInnerSize: function getInnerSize(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getInnerSize(nativeNodeReference);\n  },\n  getScrollPosition: function getScrollPosition(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getScrollPosition(nativeNodeReference);\n  },\n  getScrollSize: function getScrollSize(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getScrollSize(nativeNodeReference);\n  },\n  getTagName: function getTagName(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getTagName(nativeNodeReference);\n  },\n  getTextContent: function getTextContent(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getTextContent(nativeNodeReference);\n  },\n  hasPointerCapture: function hasPointerCapture(nativeNodeReference, pointerId) {\n    return (0, _nullthrows.default)(RawNativeDOM).hasPointerCapture(nativeNodeReference, pointerId);\n  },\n  releasePointerCapture: function releasePointerCapture(nativeNodeReference, pointerId) {\n    return (0, _nullthrows.default)(RawNativeDOM).releasePointerCapture(nativeNodeReference, pointerId);\n  },\n  setPointerCapture: function setPointerCapture(nativeNodeReference, pointerId) {\n    return (0, _nullthrows.default)(RawNativeDOM).setPointerCapture(nativeNodeReference, pointerId);\n  },\n  getOffset: function getOffset(nativeNodeReference) {\n    return (0, _nullthrows.default)(RawNativeDOM).getOffset(nativeNodeReference);\n  },\n  linkRootNode: function linkRootNode(rootTag, instanceHandle) {\n    return (0, _nullthrows.default)(RawNativeDOM == null ? void 0 : RawNativeDOM.linkRootNode)(rootTag, instanceHandle);\n  },\n  measure: function measure(nativeNodeReference, callback) {\n    return (0, _nullthrows.default)(RawNativeDOM).measure(nativeNodeReference, callback);\n  },\n  measureInWindow: function measureInWindow(nativeNodeReference, callback) {\n    return (0, _nullthrows.default)(RawNativeDOM).measureInWindow(nativeNodeReference, callback);\n  },\n  measureLayout: function measureLayout(nativeNodeReference, relativeNode, onFail, onSuccess) {\n    return (0, _nullthrows.default)(RawNativeDOM).measureLayout(nativeNodeReference, relativeNode, onFail, onSuccess);\n  }\n};\nvar _default = exports.default = NativeDOM;","map":{"version":3,"names":["TurboModuleRegistry","_interopRequireWildcard","require","_nullthrows","_interopRequireDefault","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","RawNativeDOM","NativeDOM","compareDocumentPosition","nativeNodeReference","otherNativeNodeReference","nullthrows","getChildNodes","getParentNode","isConnected","getBorderWidth","getBoundingClientRect","includeTransform","getInnerSize","getScrollPosition","getScrollSize","getTagName","getTextContent","hasPointerCapture","pointerId","releasePointerCapture","setPointerCapture","getOffset","linkRootNode","rootTag","instanceHandle","measure","callback","measureInWindow","measureLayout","relativeNode","onFail","onSuccess","_default","exports"],"sources":["/Users/ayoubsadour/Desktop/APPMOBILE/MachineStatusApp/node_modules/react-native/src/private/webapis/dom/nodes/specs/NativeDOM.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {RootTag} from '../../../../../../Libraries/ReactNative/RootTag';\nimport type {Node as ShadowNode} from '../../../../../../Libraries/Renderer/shims/ReactNativeTypes';\nimport type {TurboModule} from '../../../../../../Libraries/TurboModule/RCTExport';\nimport type {InstanceHandle} from '../internals/NodeInternals';\n\nimport * as TurboModuleRegistry from '../../../../../../Libraries/TurboModule/TurboModuleRegistry';\nimport nullthrows from 'nullthrows';\n\nexport opaque type NativeElementReference = ShadowNode;\nexport opaque type NativeTextReference = ShadowNode;\n\nexport type NativeNodeReference =\n  | NativeElementReference\n  | NativeTextReference\n  | RootTag;\n\nexport type MeasureInWindowOnSuccessCallback = (\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n) => void;\n\nexport type MeasureOnSuccessCallback = (\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  pageX: number,\n  pageY: number,\n) => void;\n\nexport type MeasureLayoutOnSuccessCallback = (\n  left: number,\n  top: number,\n  width: number,\n  height: number,\n) => void;\n\nexport interface Spec extends TurboModule {\n  /*\n   * Methods from the `Node` interface (for `ReadOnlyNode`).\n   */\n\n  +compareDocumentPosition: (\n    nativeNodeReference: mixed /* NativeNodeReference */,\n    otherNativeNodeReference: mixed /* NativeNodeReference */,\n  ) => number;\n\n  +getChildNodes: (\n    nativeNodeReference: mixed /* NativeNodeReference */,\n  ) => $ReadOnlyArray<mixed> /* $ReadOnlyArray<InstanceHandle> */;\n\n  +getParentNode: (\n    nativeNodeReference: mixed /* NativeNodeReference */,\n  ) => mixed /* ?InstanceHandle */;\n\n  +isConnected: (\n    nativeNodeReference: mixed /* NativeNodeReference */,\n  ) => boolean;\n\n  /*\n   * Methods from the `Element` interface (for `ReactNativeElement`).\n   */\n\n  +getBorderWidth: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => $ReadOnlyArray<number> /* [topWidth: number, rightWidth: number, bottomWidth: number, leftWidth: number] */;\n\n  +getBoundingClientRect: (\n    nativeElementReference: mixed /* NativeElementReference */,\n    includeTransform: boolean,\n  ) => $ReadOnlyArray<number> /* [x: number, y: number, width: number, height: number] */;\n\n  +getInnerSize: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => $ReadOnlyArray<number> /* [width: number, height: number] */;\n\n  +getScrollPosition: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => $ReadOnlyArray<number> /* [scrollLeft: number, scrollTop: number] */;\n\n  +getScrollSize: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => $ReadOnlyArray<number> /* [scrollWidth: number, scrollHeight: number] */;\n\n  +getTagName: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => string;\n\n  +getTextContent: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => string;\n\n  +hasPointerCapture: (\n    nativeElementReference: mixed /* NativeElementReference */,\n    pointerId: number,\n  ) => boolean;\n\n  +releasePointerCapture: (\n    nativeElementReference: mixed /* NativeElementReference */,\n    pointerId: number,\n  ) => void;\n\n  +setPointerCapture: (\n    nativeElementReference: mixed /* NativeElementReference */,\n    pointerId: number,\n  ) => void;\n\n  /*\n   * Methods from the `HTMLElement` interface (for `ReactNativeElement`).\n   */\n\n  +getOffset: (\n    nativeElementReference: mixed /* NativeElementReference */,\n  ) => $ReadOnlyArray<mixed> /* [offsetParent: ?InstanceHandle, top: number, left: number] */;\n\n  /*\n   * Special methods to handle the root node.\n   */\n\n  +linkRootNode?: (\n    rootTag: number /* RootTag */,\n    instanceHandle: mixed /* InstanceHandle */,\n  ) => mixed /* ?NativeElementReference */;\n\n  /**\n   * Legacy layout APIs (for `ReactNativeElement`).\n   */\n\n  +measure: (\n    nativeElementReference: mixed,\n    callback: MeasureOnSuccessCallback,\n  ) => void;\n\n  +measureInWindow: (\n    nativeElementReference: mixed,\n    callback: MeasureInWindowOnSuccessCallback,\n  ) => void;\n\n  +measureLayout: (\n    nativeElementReference: mixed,\n    relativeNode: mixed,\n    onFail: () => void,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n  ) => void;\n}\n\nconst RawNativeDOM = (TurboModuleRegistry.get<Spec>('NativeDOMCxx'): ?Spec);\n\n// This is the actual interface of this module, but the native module codegen\n// isn't expressive enough yet.\nexport interface RefinedSpec {\n  /*\n   * Methods from the `Node` interface (for `ReadOnlyNode`).\n   */\n\n  /**\n   * This is a React Native implementation of `Node.prototype.compareDocumentPosition`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition).\n   *\n   * It uses the version of the shadow nodes that are present in the current\n   * revision of the shadow tree (if any). If any of the nodes is not present,\n   * it just indicates they are disconnected.\n   */\n  +compareDocumentPosition: (\n    nativeNodeReference: NativeNodeReference,\n    otherNativeNodeReference: NativeNodeReference,\n  ) => number;\n\n  /**\n   * This is a React Native implementation of `Node.prototype.childNodes`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes).\n   *\n   * If a version of the given shadow node is present in the current revision\n   * of an active shadow tree, it returns an array of instance handles of its\n   * children. Otherwise, it returns an empty array.\n   */\n  +getChildNodes: (\n    nativeNodeReference: NativeNodeReference,\n  ) => $ReadOnlyArray<InstanceHandle>;\n\n  /**\n   * This is a React Native implementation of `Node.prototype.parentNode`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode).\n   *\n   * If a version of the given shadow node is present in the current revision of\n   * an active shadow tree, it returns the instance handle of its parent.\n   * Otherwise, it returns `null`.\n   */\n  +getParentNode: (nativeNodeReference: NativeNodeReference) => ?InstanceHandle;\n\n  /**\n   * This is a React Native implementation of `Node.prototype.isConnected`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected).\n   *\n   * Indicates whether a version of the given shadow node is present in the\n   * current revision of an active shadow tree.\n   */\n  +isConnected: (nativeNodeReference: NativeNodeReference) => boolean;\n\n  /*\n   * Methods from the `Element` interface (for `ReactNativeElement`).\n   */\n\n  /**\n   * This is a method to access the border size of a shadow node, to implement\n   * these methods:\n   *   - `Element.prototype.clientLeft`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft.\n   *   - `Element.prototype.clientTop`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop.\n   *\n   * It uses the version of the shadow node that is present in the current\n   * revision of the shadow tree. If the node is not present, it is not\n   * displayed (because any of its ancestors or itself have 'display: none'), or\n   * it has an inline display, it returns `undefined`. Otherwise, it returns its\n   * border size.\n   */\n  +getBorderWidth: (\n    nativeElementReference: NativeElementReference,\n  ) => $ReadOnly<\n    [\n      /* topWidth: */ number,\n      /* rightWidth: */ number,\n      /* bottomWidth: */ number,\n      /* leftWidth: */ number,\n    ],\n  >;\n\n  /**\n   * This is a React Native implementation of `Element.prototype.getBoundingClientRect`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).\n   *\n   * This is similar to `measureInWindow`, except it's explicitly synchronous\n   * (returns the result instead of passing it to a callback).\n   *\n   * It allows indicating whether to include transforms so it can also be used\n   * to implement methods like [`offsetWidth`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth)\n   * and [`offsetHeight`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight).\n   */\n  +getBoundingClientRect: (\n    nativeElementReference: NativeElementReference,\n    includeTransform: boolean,\n  ) => $ReadOnly<\n    [\n      /* x: */ number,\n      /* y: */ number,\n      /* width: */ number,\n      /* height: */ number,\n    ],\n  >;\n\n  /**\n   * This is a method to access the inner size of a shadow node, to implement\n   * these methods:\n   *   - `Element.prototype.clientWidth`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth.\n   *   - `Element.prototype.clientHeight`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight.\n   *\n   * It uses the version of the shadow node that is present in the current\n   * revision of the shadow tree. If the node is not present, it is not\n   * displayed (because any of its ancestors or itself have 'display: none'), or\n   * it has an inline display, it returns `undefined`. Otherwise, it returns its\n   * inner size.\n   */\n  +getInnerSize: (\n    nativeElementReference: NativeElementReference,\n  ) => $ReadOnly<[/* width: */ number, /* height: */ number]>;\n\n  /**\n   * This is a method to access scroll information for a shadow node, to\n   * implement these methods:\n   *   - `Element.prototype.scrollLeft`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft.\n   *   - `Element.prototype.scrollTop`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop.\n   *\n   * It uses the version of the shadow node that is present in the current\n   * revision of the shadow tree. If the node is not present or is not displayed\n   * (because any of its ancestors or itself have 'display: none'), it returns\n   * `undefined`. Otherwise, it returns the scroll position.\n   */\n  +getScrollPosition: (\n    nativeElementReference: NativeElementReference,\n  ) => $ReadOnly<[/* scrollLeft: */ number, /* scrollTop: */ number]>;\n\n  /**\n   *\n   * This is a method to access the scroll information of a shadow node, to\n   * implement these methods:\n   *   - `Element.prototype.scrollWidth`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth.\n   *   - `Element.prototype.scrollHeight`: see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight.\n   *\n   * It uses the version of the shadow node that is present in the current\n   * revision of the shadow tree. If the node is not present or is not displayed\n   * (because any of its ancestors or itself have 'display: none'), it returns\n   * `undefined`. Otherwise, it returns the scroll size.\n   */\n  +getScrollSize: (\n    nativeElementReference: NativeElementReference,\n  ) => $ReadOnly<[/* scrollWidth: */ number, /* scrollHeight: */ number]>;\n\n  /**\n   * This is a method to access the normalized tag name of a shadow node, to\n   * implement `Element.prototype.tagName` (see https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName).\n   */\n  +getTagName: (nativeElementReference: NativeElementReference) => string;\n\n  /**\n   * This is a React Native implementation of `Element.prototype.textContent`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Element/textContent).\n   *\n   * It uses the version of the shadow node that is present in the current\n   * revision of the shadow tree.\n   * If the version is present, is traverses all its children in DFS and\n   * concatenates all the text contents. Otherwise, it returns an empty string.\n   *\n   * This is also used to access the text content of text nodes, which does not\n   * need any traversal.\n   */\n  +getTextContent: (nativeNodeReference: NativeNodeReference) => string;\n\n  +hasPointerCapture: (\n    nativeElementReference: NativeElementReference,\n    pointerId: number,\n  ) => boolean;\n\n  +releasePointerCapture: (\n    nativeElementReference: NativeElementReference,\n    pointerId: number,\n  ) => void;\n\n  +setPointerCapture: (\n    nativeElementReference: NativeElementReference,\n    pointerId: number,\n  ) => void;\n\n  /**\n   * This is a method to access the offset information for a shadow node, to\n   * implement these methods:\n   *   - `HTMLElement.prototype.offsetParent`: see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent.\n   *   - `HTMLElement.prototype.offsetTop`: see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop.\n   *   - `HTMLElement.prototype.offsetLeft`: see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft.\n   *\n   * It uses the version of the shadow node that is present in the current\n   * revision of the shadow tree. If the node is not present or is not\n   * displayed (because any of its ancestors or itself have 'display: none'),\n   * it returns `undefined`. Otherwise, it returns its parent (as all nodes in\n   * React Native are currently \"positioned\") and its offset relative to its\n   * parent.\n   */\n  +getOffset: (\n    nativeElementReference: NativeElementReference,\n  ) => $ReadOnly<\n    [\n      /* offsetParent: */ ?InstanceHandle,\n      /* top: */ number,\n      /* left: */ number,\n    ],\n  >;\n\n  /*\n   * Special methods to handle the root node.\n   */\n\n  /**\n   * In React Native, surfaces that represent trees (similar to a `Document` on\n   * Web) are created in native first, and then populated from JavaScript.\n   *\n   * Because React does not create this special node, we need a way to link\n   * the JavaScript instance with that node, which is what this method allows.\n   *\n   * It also allows the implementation of `Node.prototype.ownerDocument` and\n   * `Node.prototype.getRootNode`\n   * (see https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument and\n   * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode).\n   *\n   * Returns a shadow node representing the root node if it is still mounted.\n   */\n  +linkRootNode: (\n    rootTag: RootTag,\n    instanceHandle: InstanceHandle,\n  ) => ?NativeElementReference;\n\n  /**\n   * Legacy layout APIs\n   */\n\n  +measure: (\n    nativeElementReference: NativeElementReference,\n    callback: MeasureOnSuccessCallback,\n  ) => void;\n\n  +measureInWindow: (\n    nativeElementReference: NativeElementReference,\n    callback: MeasureInWindowOnSuccessCallback,\n  ) => void;\n\n  +measureLayout: (\n    nativeElementReference: NativeElementReference,\n    relativeNode: NativeElementReference,\n    onFail: () => void,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n  ) => void;\n}\n\nconst NativeDOM: RefinedSpec = {\n  /*\n   * Methods from the `Node` interface (for `ReadOnlyNode`).\n   */\n\n  compareDocumentPosition(nativeNodeReference, otherNativeNodeReference) {\n    return nullthrows(RawNativeDOM).compareDocumentPosition(\n      nativeNodeReference,\n      otherNativeNodeReference,\n    );\n  },\n\n  getChildNodes(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getChildNodes(\n      nativeNodeReference,\n    ): $ReadOnlyArray<InstanceHandle>);\n  },\n\n  getParentNode(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getParentNode(\n      nativeNodeReference,\n    ): ?InstanceHandle);\n  },\n\n  isConnected(nativeNodeReference) {\n    return nullthrows(RawNativeDOM).isConnected(nativeNodeReference);\n  },\n\n  /*\n   * Methods from the `Element` interface (for `ReactNativeElement`).\n   */\n\n  getBorderWidth(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getBorderWidth(\n      nativeNodeReference,\n    ): $ReadOnly<\n      [\n        /* topWidth: */ number,\n        /* rightWidth: */ number,\n        /* bottomWidth: */ number,\n        /* leftWidth: */ number,\n      ],\n    >);\n  },\n\n  getBoundingClientRect(nativeNodeReference, includeTransform: boolean) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getBoundingClientRect(\n      nativeNodeReference,\n      includeTransform,\n    ): $ReadOnly<\n      [\n        /* x: */ number,\n        /* y: */ number,\n        /* width: */ number,\n        /* height: */ number,\n      ],\n    >);\n  },\n\n  getInnerSize(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getInnerSize(\n      nativeNodeReference,\n    ): $ReadOnly<[/* width: */ number, /* height: */ number]>);\n  },\n\n  getScrollPosition(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getScrollPosition(\n      nativeNodeReference,\n    ): $ReadOnly<[/* scrollLeft: */ number, /* scrollTop: */ number]>);\n  },\n\n  getScrollSize(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getScrollSize(\n      nativeNodeReference,\n    ): $ReadOnly<[/* scrollWidth: */ number, /* scrollHeight: */ number]>);\n  },\n\n  getTagName(nativeNodeReference) {\n    return nullthrows(RawNativeDOM).getTagName(nativeNodeReference);\n  },\n\n  getTextContent(nativeNodeReference) {\n    return nullthrows(RawNativeDOM).getTextContent(nativeNodeReference);\n  },\n\n  hasPointerCapture(nativeNodeReference, pointerId) {\n    return nullthrows(RawNativeDOM).hasPointerCapture(\n      nativeNodeReference,\n      pointerId,\n    );\n  },\n\n  releasePointerCapture(nativeNodeReference, pointerId) {\n    return nullthrows(RawNativeDOM).releasePointerCapture(\n      nativeNodeReference,\n      pointerId,\n    );\n  },\n\n  setPointerCapture(nativeNodeReference, pointerId) {\n    return nullthrows(RawNativeDOM).setPointerCapture(\n      nativeNodeReference,\n      pointerId,\n    );\n  },\n\n  /*\n   * Methods from the `HTMLElement` interface (for `ReactNativeElement`).\n   */\n\n  getOffset(nativeNodeReference) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM).getOffset(nativeNodeReference): $ReadOnly<\n      [\n        /* offsetParent: */ ?InstanceHandle,\n        /* top: */ number,\n        /* left: */ number,\n      ],\n    >);\n  },\n\n  /*\n   * Special methods to handle the root node.\n   */\n\n  linkRootNode(rootTag, instanceHandle) {\n    // $FlowExpectedError[incompatible-cast]\n    return (nullthrows(RawNativeDOM?.linkRootNode)(\n      // $FlowExpectedError[incompatible-call]\n      rootTag,\n      instanceHandle,\n    ): ?NativeElementReference);\n  },\n\n  /**\n   * Legacy layout APIs\n   */\n\n  measure(nativeNodeReference, callback) {\n    return nullthrows(RawNativeDOM).measure(nativeNodeReference, callback);\n  },\n\n  measureInWindow(nativeNodeReference, callback) {\n    return nullthrows(RawNativeDOM).measureInWindow(\n      nativeNodeReference,\n      callback,\n    );\n  },\n\n  measureLayout(nativeNodeReference, relativeNode, onFail, onSuccess) {\n    return nullthrows(RawNativeDOM).measureLayout(\n      nativeNodeReference,\n      relativeNode,\n      onFail,\n      onSuccess,\n    );\n  },\n};\n\nexport default NativeDOM;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}